---
import BaseLayout from "@Layouts/app.layout.astro";
// import ProductVariantUpload from "@Components/ProductVariantUpload.astro";
import ProductVariantForm from "@Components/ProductVariantForm.astro";
// import UploadFile from "@Components/FileUpload.astro";
import { db } from "astro:db";
import UploadFile from "@Components/shared/ImageUploader.astro";
import BreadCrumbs from "@Components/BreadCrumbs.astro";
import type { CommonNames } from "@Types/entities";
import MetadataDescription from "@Components/MetadataDescription.astro";
import { Country, Brand, Category, CommonName, ProductType } from "astro:db";

const Categories = await db
	.select({ id: Category.id, name: Category.name })
	.from(Category)
	.all();
const Brands = await db
	.select({ id: Brand.id, name: Brand.name })
	.from(Brand)
	.all();
const CommonNames = await db
	.select({
		id: CommonName.id,
		name: CommonName.name,
		categories: CommonName.categories,
		active: CommonName.active,
		desc_active: CommonName.desc_active,
	})
	.from(CommonName)
	.all();
const ProductTypes = await db
	.select({
		id: ProductType.id,
		name: ProductType.name,
		categories: ProductType.categories,
	})
	.from(ProductType)
	.all();
const Origins = await db
	.select({
		id: Country.id,
		name: Country.name,
	})
	.from(Country)
	.all();

const breadcrumbs = [
	{
		label: "Productos",
		path: "/products",
	},
	{
		label: "Crear",
		path: "/products/create",
	},
];
---

<BaseLayout title="Crear Producto">
	<div
		class="shadow-md rounded-lg overflow-hidden transition-shadow hover:shadow-lg"
	>
		<div
			class="p-4 block sm:flex items-center justify-between border-b border-gray-200 lg:mt-1.5"
		>
			<div class="w-full mb-1">
				<BreadCrumbs
					routes={breadcrumbs}
					currentRoute={Astro.url.pathname}
					headerTitle="Crear Producto"
				/>
			</div>
		</div>

		<div class="flex flex-col">
			<div class="overflow-x-auto">
				<div class="inline-block min-w-full align-middle">
					<form id="createForm" class="space-y-6">
						<input
							type="hidden"
							name="productId"
							id="productId"
							value=""
						/>
						<section class="flex flex-col">
							<div class="overflow-x-auto">
								<div
									class="relative shadow-md sm:rounded-lg bg-gray-50/25 dark:bg-gray-800/25"
								>
									<div
										class="p-4 space-y-3 md:space-y-0 md:space-x-4 overflow-hidden"
									>
										<div
											class="mb-4 border-b border-gray-200/25 dark:border-gray-700/25"
										>
											<ul
												class="flex flex-wrap -mb-px text-sm font-medium text-center text-gray-600 border-b border-gray-400 dark:border-gray-500 dark:text-gray-300"
												id="default-tab"
												data-tabs-toggle="#default-tab-content"
												role="tablist"
											>
												<li
													class="me-2"
													role="presentation"
												>
													<button
														class="inline-block p-4 border-b-2 rounded-t-lg text-primary-600 bg-gray-100/75 dark:bg-gray-600/75 dark:text-gray-100"
														id="productGeneral-tab"
														data-tabs-target="#productGeneral"
														type="button"
														role="tab"
														aria-controls="productGeneral"
														aria-selected="false"
														>General</button
													>
												</li>
												<li
													class="me-2"
													role="presentation"
												>
													<button
														class="inline-block p-4 border-b-2 rounded-t-lg"
														id="productVariants-tab"
														data-tabs-target="#productVariants"
														type="button"
														role="tab"
														aria-controls="productVariants"
														aria-selected="false"
														>Variantes</button
													>
												</li>
												<li
													class="me-2"
													role="presentation"
												>
													<button
														class="inline-block p-4 border-b-2 rounded-t-lg hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300"
														id="productDesc-tab"
														data-tabs-target="#productDesc"
														type="button"
														role="tab"
														aria-controls="productDesc"
														aria-selected="false"
														>Descripción</button
													>
												</li>
												<li
													class="me-2"
													role="presentation"
												>
													<button
														class="inline-block p-4 border-b-2 rounded-t-lg hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300"
														id="productPrices-tab"
														data-tabs-target="#productPrices"
														type="button"
														role="tab"
														aria-controls="productPrices"
														aria-selected="false"
														>Precios</button
													>
												</li>
												<li
													class="me-2"
													role="presentation"
												>
													<button
														class="inline-block p-4 border-b-2 rounded-t-lg hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300"
														id="productStock-tab"
														data-tabs-target="#productStock"
														type="button"
														role="tab"
														aria-controls="productStock"
														aria-selected="false"
														>Stock</button
													>
												</li>
												<li
													class="me-2"
													role="presentation"
												>
													<button
														class="inline-block p-4 border-b-2 rounded-t-lg hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300"
														id="productLogistics-tab"
														data-tabs-target="#productLogistics"
														type="button"
														role="tab"
														aria-controls="productLogistics"
														aria-selected="false"
														>Logistica</button
													>
												</li>
											</ul>
										</div>
										<div id="default-tab-content">
											<!-- General -->
											<div
												class="hidden p-4 rounded-lg bg-gray-50/25 dark:bg-gray-700/25"
												id="productGeneral"
												role="tabpanel"
												aria-labelledby="productGeneral-tab"
											>
												<div
													class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"
												>
													<!-- Image -->
													<div class="col-span-1">
														<div
															class="rounded-lg shadow"
														>
															<UploadFile
																productId="productImage"
															/>
															<div
																class="flex items-center justify-center"
															>
																<div
																	class="flex items-center justify-center w-full h-full"
																>
																	<div
																		class="relative w-full h-full"
																	>
																		<div
																			class="absolute inset-0 flex items-center justify-center"
																		>
																			<button
																				type="button"
																				data-toggle="tooltip"
																				title="Subir imagen"
																				class="bg-transparent
																				text-secondary-600
																				hover:text-secondary-700
																				dark:text-secondary-400
																				dark:hover:text-secondary-500
																				rounded-lg
																				p-1.5
																				absolute
																				top-2
																				right-2
																				focus:outline-none
																				focus:ring-2
																				focus:ring-secondary-500
																				focus:ring-offset-2"
																			>
																				<svg
																					class="w-5 h-5"
																					fill="currentColor"
																					viewBox="0 0 20 20"
																					xmlns="http://www.w3.org/2000/svg"
																					><path
																						fill-rule="evenodd"
																						d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z"
																						clip-rule="evenodd"
																					>
																					</path></svg
																				>
																			</button>
																			<input
																				type="file"
																				name="productImage"
																				id="productImage"
																				class="hidden"
																				data-product-id=""
																				data-max-files="5"
																			/>
																		</div>
																	</div>
																</div>
															</div>
														</div>
													</div>
													<!-- General -->
													<div
														class="col-span-1 lg:col-span-2 flex items-center"
													>
														<div
															class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-0 sm:gap-4"
														>
															<div
																class="col-span-1 sm:col-span-1 md:col-span-2"
															>
																<label
																	for="productCommonName"
																	class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
																	>Nombre
																	Común</label
																>
																<select
																	id="productCommonName"
																	name="productCommonName"
																	class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 select2"
																>
																	<option
																		value="0"
																		selected=""
																		>--
																		Seleccionar
																		Nombre
																		Común --</option
																	>
																	{
																		CommonNames.map(
																			(
																				commonName,
																			) => (
																				<option
																					value={
																						commonName.id
																					}
																					data-categories={
																						commonName.categories
																					}
																					data-active={
																						commonName.active
																					}
																					data-description={
																						commonName.desc_active
																					}
																				>
																					{
																						commonName.name
																					}
																				</option>
																			),
																		)
																	}
																</select>
															</div>
															<div
																class="col-span-1 sm:col-span-1 md:col-span-1"
															>
																<label
																	for="productType"
																	class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
																	>Tipo</label
																>
																<select
																	id="productType"
																	name="productType"
																	class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 select2"
																>
																	<option
																		value="0"
																		selected=""
																		>--
																		Seleccionar
																		Tipo --</option
																	>

																	{
																		ProductTypes.map(
																			(
																				type,
																			) => (
																				<option
																					value={
																						type.id
																					}
																					data-categories={
																						type.categories
																					}
																				>
																					{
																						type.name
																					}
																				</option>
																			),
																		)
																	}
																</select>
															</div>
															<div
																class="col-span-1 sm:col-span-1 md:col-span-1"
															>
																<label
																	for="productBrand"
																	class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
																	>Marca</label
																>
																<select
																	id="productBrand"
																	name="productBrand"
																	class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 select2"
																>
																	<option
																		value="0"
																		selected=""
																		>--
																		Seleccionar
																		Marca --</option
																	>
																	{
																		Brands.map(
																			(
																				brand,
																			) => (
																				<option
																					value={
																						brand.id
																					}
																				>
																					{
																						brand.name
																					}
																				</option>
																			),
																		)
																	}
																</select>
															</div>
															<div
																class="col-span-1 sm:col-span-1 md:col-span-1"
															>
																<label
																	for="productSKU"
																	class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
																	>SKU</label
																>
																<div
																	class="relative"
																>
																	<div
																		class="absolute inset-y-0 end-0 flex items-center"
																	>
																		<button
																			data-tooltip-target="tooltip-gen-sku"
																			type="button"
																			class="text-white
																			end-2.5
																			bottom-2.5
																			bg-primary-700
																			hover:bg-primary-800
																			focus:ring-4
																			focus:outline-none
																			focus:ring-primary-300
																			font-medium
																			rounded-lg
																			text-sm px-3 py-2.5
																			text-center
																			dark:bg-primary-600
																			dark:hover:bg-primary-700
																			dark:focus:ring-primary-800"
																			id="productSKUGenButton"
																		>
																			<svg
																				xmlns="http://www.w3.org/2000/svg"
																				height="24px"
																				viewBox="0 -960 960 960"
																				width="24px"
																				fill="#e8eaed"
																				><path
																					d="M160-160q-33 0-56.5-23.5T80-240v-480q0-33 23.5-56.5T160-800h640q33 0 56.5 23.5T880-720v480q0 33-23.5 56.5T800-160H160Zm0-80h640v-400H160v400Zm140-40-56-56 103-104-104-104 57-56 160 160-160 160Zm180 0v-80h240v80H480Z"
																				>
																				</path></svg
																			>
																			<span
																				class="sr-only"
																				>Generar
																				SKU</span
																			>
																		</button>
																		<div
																			id="tooltip-gen-sku"
																			role="tooltip"
																			class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-gray-700"
																		>
																			Generar
																			SKU
																			<div
																				class="tooltip-arrow"
																				data-popper-arrow
																			>
																			</div>
																		</div>
																	</div>
																	<input
																		type="text"
																		name="productSKU"
																		id="productSKU"
																		class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
																		placeholder="SKU del Producto"
																	/>
																</div>
															</div>
															<div
																class="col-span-1 sm:col-span-1 md:col-span-1"
															>
																<label
																	for="productMPN"
																	class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
																	>MPN</label
																>
																<div
																	class="relative"
																>
																	<div
																		class="absolute inset-y-0 end-0 flex items-center"
																	>
																		<button
																			data-tooltip-target="tooltip-gen-mpn"
																			type="button"
																			class="text-white
																			end-2.5
																			bottom-2.5
																			focus:ring-4
																			focus:outline-none
																			font-medium
																			rounded-lg
																			text-sm px-3 py-2.5
																			text-center
																			bg-primary-600
																			hover:bg-primary-700
																			focus:ring-primary-700
																			dark:bg-primary-600
																			dark:hover:bg-primary-700
																			dark:focus:ring-primary-700"
																			id="productMPNGenButton"
																		>
																			<svg
																				xmlns="http://www.w3.org/2000/svg"
																				height="24px"
																				viewBox="0 -960 960 960"
																				width="24px"
																				fill="#e8eaed"
																				><path
																					d="M160-160q-33 0-56.5-23.5T80-240v-480q0-33 23.5-56.5T160-800h640q33 0 56.5 23.5T880-720v480q0 33-23.5 56.5T800-160H160Zm0-80h640v-400H160v400Zm140-40-56-56 103-104-104-104 57-56 160 160-160 160Zm180 0v-80h240v80H480Z"
																				>
																				</path></svg
																			>
																			<span
																				class="sr-only"
																				>Generar
																				MPN</span
																			>
																		</button>
																		<div
																			id="tooltip-gen-mpn"
																			role="tooltip"
																			class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-gray-700"
																		>
																			Generar
																			MPN
																			<div
																				class="tooltip-arrow"
																				data-popper-arrow
																			>
																			</div>
																		</div>
																	</div>
																	<input
																		type="text"
																		name="productMPN"
																		id="productMPN"
																		class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
																		placeholder="MPN del Producto"
																	/>
																</div>
															</div>
															<div
																class="col-span-1 sm:col-span-1 md:col-span-1"
															>
																<label
																	for="productUPC"
																	class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
																	>UPC</label
																>
																<div
																	class="relative"
																>
																	<div
																		class="absolute inset-y-0 end-0 flex items-center"
																	>
																		<button
																			data-tooltip-target="tooltip-gen-upc"
																			type="button"
																			class="text-white
																	end-2.5
																	bottom-2.5
																	bg-primary-700
																	hover:bg-primary-800
																	focus:ring-4
																	focus:outline-none
																	focus:ring-primary-300
																	font-medium
																	rounded-lg
																	text-sm px-3 py-2.5
																	text-center
																	dark:bg-primary-600
																	dark:hover:bg-primary-700
																	dark:focus:ring-primary-800"
																			id="productUPCGenButton"
																		>
																			<svg
																				xmlns="http://www.w3.org/2000/svg"
																				height="24px"
																				viewBox="0 -960 960 960"
																				width="24px"
																				fill="#e8eaed"
																				><path
																					d="M160-160q-33 0-56.5-23.5T80-240v-480q0-33 23.5-56.5T160-800h640q33 0 56.5 23.5T880-720v480q0 33-23.5 56.5T800-160H160Zm0-80h640v-400H160v400Zm140-40-56-56 103-104-104-104 57-56 160 160-160 160Zm180 0v-80h240v80H480Z"
																				>
																				</path></svg
																			>
																			<span
																				class="sr-only"
																				>Generar
																				UPC</span
																			>
																		</button>
																		<div
																			id="tooltip-gen-upc"
																			role="tooltip"
																			class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-gray-700"
																		>
																			Generar
																			UPC
																			<div
																				class="tooltip-arrow"
																				data-popper-arrow
																			>
																			</div>
																		</div>
																	</div>
																	<input
																		type="text"
																		name="productUPC"
																		id="productUPC"
																		class="shadow-sm
																		bg-gray-50
																		border
																		text-sm
																		rounded-lg
																		block
																		w-full
																		p-2.5 ps-10
																		border-gray-300
																		text-gray-900
																		focus:ring-primary-600
																		focus:border-primary-600
																		dark:bg-gray-600
																		dark:border-gray-500
																		dark:placeholder-gray-400
																		dark:text-white
																		dark:focus:ring-primary-500
																		dark:focus:border-primary-500"
																		placeholder="UPC de Producto"
																		required=""
																	/>
																</div>
																<p
																	id="productUPC-valid"
																	class="mt-2 text-sm text-green-600 dark:text-green-500 hidden"
																>
																	<span
																		class="font-medium"
																		>¡Bien!</span
																	> ¡El UPC no
																	existe!
																</p>

																<p
																	id="productUPC-invalid"
																	class="mt-2 text-sm text-red-600 dark:text-red-500 hidden"
																>
																	<span
																		class="font-medium"
																		>Oops!</span
																	> ¡El UPC ya
																	existe!
																</p>
															</div>
															<div
																class="col-span-1 sm:col-span-1 md:col-span-1"
															>
																<label
																	for="productEAN"
																	class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
																	>EAN</label
																>
																<input
																	type="text"
																	name="productEAN"
																	id="productEAN"
																	class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
																	placeholder="EAN del Producto"
																/>
															</div>
															<div
																class="col-span-1 flex items-center"
															>
																<label
																	class="inline-flex items-center mb-2 cursor-pointer"
																>
																	<input
																		id="productUsed"
																		name="productUsed"
																		type="checkbox"
																		value=""
																		class="sr-only peer"
																	/>
																	<div
																		class="relative w-11 h-6 bg-red-500 peer peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-gray-300 peer-checked:after:translate-x-full peer-checked:after:border-white peer-checked:bg-green-600 rounded-full rtl:peer-checked:after:-translate-x-full after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:w-5 after:h-5 after:transition-all dark:peer-focus:ring-gray-800 dark:bg-red-700 dark:border-gray-600"
																	>
																	</div>
																	<span
																		class="ms-3 text-sm font-medium text-gray-400 dark:text-gray-500"
																	>
																		Usado/Reparado
																	</span>
																</label>
															</div>
															<div
																class="col-span-1 sm:col-span-1 md:col-span-2"
															>
																<label
																	for="productName"
																	class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
																	>Nombre</label
																>
																<input
																	type="text"
																	name="productName"
																	id="productName"
																	class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
																	placeholder="Nombre del Producto"
																	required=""
																/>
															</div>
															<div
																class="col-span-1 flex items-center"
															>
																<label
																	class="inline-flex items-center mb-2 cursor-pointer"
																>
																	<input
																		id="productActive"
																		name="productActive"
																		type="checkbox"
																		value=""
																		class="sr-only peer"
																	/>
																	<div
																		class="relative w-11 h-6 bg-red-500 peer peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-gray-300 peer-checked:after:translate-x-full peer-checked:after:border-white peer-checked:bg-green-600 rounded-full rtl:peer-checked:after:-translate-x-full after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:w-5 after:h-5 after:transition-all dark:peer-focus:ring-gray-800 dark:bg-red-700 dark:border-gray-600"
																	>
																	</div>
																	<span
																		class="ms-3 text-sm font-medium text-gray-400 dark:text-gray-500"
																	>
																		Activo
																	</span>
																</label>
															</div>
														</div>
													</div>
													<div
														class="col-span-1 flex items-center"
													>
														<button
															id="btnAddProduct"
															class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-md"
															type="button"
															>Guardar</button
														>
													</div>
												</div>
											</div>

											<!-- Product Variants -->
											<div
												class="hidden p-4 rounded-lg bg-gray-50 dark:bg-gray-700"
												id="productVariants"
												role="tabpanel"
												aria-labelledby="productVariants-tab"
											>
												<div
													class="grid grid-cols-1 gap-4"
												>
													<div class="col-span-1">
														<ProductVariantForm />
													</div>

													<div class="col-span-12">
													</div>

													<div
														class="col-span-6 sm:col-span-2"
													>
														<button
															id="btnAddVariantsProduct"
															class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-md"
															type="submit"
															>Guardar</button
														>
													</div>
												</div>
											</div>

											<!-- Product Tags -->
											<div
												class="hidden p-4 rounded-lg bg-gray-50 dark:bg-gray-800"
												id="productDesc"
												role="tabpanel"
												aria-labelledby="productDesc-tab"
											>
												<h1
													class="text-center text-2xl"
												>
													Seleccione un Nombre Común
													<MetadataDescription
														productId=""
													/>
												</h1>
											</div>

											<!-- Taxonomy & Prices -->
											<div
												class="hidden p-4 rounded-lg bg-gray-50 dark:bg-gray-800"
												id="productPrices"
												role="tabpanel"
												aria-labelledby="productPrices-tab"
											>
												<div
													class="grid grid-cols-12 gap-4"
												>
													<div
														class="col-span-6 sm:col-span-12"
													>
														<label
															for="productTaxonomy"
															class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
															>Taxonomia Google</label
														>
														<select
															id="productTaxonomy"
															name="productTaxonomy"
															class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
														>
															<option
																value="0"
																selected=""
																>-- Seleccionar
																Taxonomia --</option
															>
														</select>
													</div>
													<div
														class="col-span-6 sm:col-span-3"
													>
														<label
															for="phone-number"
															class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
															>Cantidad</label
														>
														<input
															type="number"
															name="phone-number"
															id="phone-number"
															class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
															placeholder="e.g. +(12)3456 789"
															required=""
														/>
													</div>
													<div
														class="col-span-6 sm:col-span-3"
													>
														<label
															for="department"
															class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
															>Sucursal</label
														>
														<input
															type="text"
															name="department"
															id="department"
															class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
															placeholder="Development"
															required=""
														/>
													</div>
												</div>
											</div>

											<!-- Stock -->
											<div
												class="hidden p-4 rounded-lg bg-gray-50 dark:bg-gray-800"
												id="productStock"
												role="tabpanel"
												aria-labelledby="productStock-tab"
											>
												<div
													class="grid grid-cols-12 gap-4"
												>
													<div
														class="col-span-6 sm:col-span-3"
													>
														<label
															for="phone-number"
															class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
															>Medida</label
														>
														<input
															type="number"
															name="phone-number"
															id="phone-number"
															class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
															placeholder="e.g. +(12)3456 789"
															required=""
														/>
													</div>
													<div
														class="col-span-6 sm:col-span-3"
													>
														<label
															for="department"
															class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
															>Unidades</label
														>
														<input
															type="text"
															name="department"
															id="department"
															class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
															placeholder="Development"
															required=""
														/>
													</div>
												</div>
											</div>

											<!-- Logistics -->
											<div
												class="hidden p-4 rounded-lg bg-gray-50/25 dark:bg-gray-700/25"
												id="productLogistics"
												role="tabpanel"
												aria-labelledby="productLogistics-tab"
											>
												<div
													class="grid grid-cols-1 md:grid-cols-4 lg:grid-cols-4 gap-2 md:gap-4"
												>
													<div class="mb-4">
														<label
															for="coutry"
															class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
															>Origen</label
														>
														<select
															name="country"
															id="country"
															class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 select2"
														>
															<option
																value="0"
																selected=""
																>-- Seleccionar
																País Origen --</option
															>
															{
																Origins.map(
																	(
																		origin,
																	) => (
																		<option
																			value={
																				origin.id
																			}
																		>
																			{
																				origin.name
																			}
																		</option>
																	),
																)
															}
														</select>
													</div>

													<div class="mb-4">
														<label
															for="weight"
															class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
															>Peso</label
														>
														<div class="relative">
															<div
																class="absolute inset-y-0 end-0 flex items-center"
															>
																<select
																	name="measureUnit"
																	id="measureUnit"
																	class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 select2"
																>
																	<option
																		value="gr"
																		selected=""
																		>Gramos</option
																	>
																	<option
																		value="kg"
																		>Kilogramos</option
																	>
																	<option
																		value="lb"
																		>Libras</option
																	>
																	<option
																		value="oz"
																		>Onzas</option
																	>
																</select>
															</div>
															<input
																type="number"
																name="weight"
																id="weight"
																class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
																placeholder="0.00"
																min="0.01"
																value="0.00"
																step="any"
															/>
														</div>
													</div>

													<div
														class="mb-4 text-center my-8"
													>
														<label
															class="inline-flex items-center mb-2 cursor-pointer"
														>
															<input
																id="objectCubicShape"
																name="objectCubicShape"
																type="checkbox"
																value=""
																class="sr-only peer"
															/>
															<div
																class="relative
																w-11
																h-6
																bg-gray-100/35
																peer
																peer-focus:outline-none
																peer-focus:ring-4
																peer-focus:ring-gray-300
																peer-checked:after:translate-x-full
																peer-checked:after:border-white
																peer-checked:bg-secondary-600
																rounded-full
																rtl:peer-checked:after:-translate-x-full
																after:content-['']
																after:absolute after:top-[2px]
																after:start-[2px]
																after:bg-white
																after:border-gray-300
																after:border
																after:rounded-full
																after:w-5
																after:h-5
																after:transition-all
																dark:peer-focus:ring-gray-800
																dark:bg-gray-500/35
																dark:border-gray-600"
															>
															</div>
															<span
																class="ms-3 text-sm font-medium text-gray-400 dark:text-gray-500"
															>
																Onjecto Cubico
															</span>
														</label>
													</div>

													<div
														class="mb-4 text-center my-8"
													>
														<label
															class="inline-flex items-center mb-2 cursor-pointer"
														>
															<input
																id="objectCylinder"
																name="objectCylinder"
																type="checkbox"
																value=""
																class="sr-only peer"
															/>
															<div
																class="relative
																w-11
																h-6
																peer
																peer-focus:outline-none
																peer-focus:ring-4
																peer-checked:after:translate-x-full
																rounded-full
																rtl:peer-checked:after:-translate-x-full
																after:content-['']
																after:absolute after:top-[2px]
																after:start-[2px]
																after:border
																after:rounded-full
																after:w-5
																after:h-5
																after:transition-all
																bg-gray-100/35
																peer-focus:ring-gray-300
																peer-checked:after:border-white
																peer-checked:bg-secondary-600
																after:bg-white
																after:border-gray-300
																dark:peer-focus:ring-gray-800
																dark:bg-gray-500/35
																dark:border-gray-600"
															>
															</div>
															<span
																class="ms-3 text-sm font-medium text-gray-400 dark:text-gray-500"
															>
																Onjecto
																Cilíndrico
															</span>
														</label>
													</div>

													<div
														class="mb-4"
														id="widthField"
													>
														<label
															for="width"
															class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
															>Ancho</label
														>
														<div class="relative">
															<div
																class="absolute inset-y-0 end-0 flex items-center"
															>
																<select
																	name="measureUnit"
																	id="measureUnit"
																	class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 select2"
																>
																	<option
																		value="mm"
																		selected=""
																		>Milimetro</option
																	>
																	<option
																		value="cm"
																		>Centimetro</option
																	>
																	<option
																		value="in"
																		>Pulgada</option
																	>
																	<option
																		value="ft"
																		>Pies</option
																	>
																	<option
																		value="yd"
																		>Yardas</option
																	>
																	<option
																		value="mi"
																		>Millas</option
																	>
																</select>
															</div>
															<input
																type="number"
																name="width"
																id="width"
																class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
																placeholder="0.00"
																min="0.01"
																value="0.00"
																step="any"
															/>
														</div>
													</div>

													<div
														class="mb-4"
														id="heightField"
													>
														<label
															for="height"
															class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
															>Alto</label
														>
														<div class="relative">
															<div
																class="absolute inset-y-0 end-0 flex items-center"
															>
																<select
																	name="measureUnit"
																	id="measureUnit"
																	class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 select2"
																>
																	<option
																		value="mm"
																		selected=""
																		>Milimetro</option
																	>
																	<option
																		value="cm"
																		>Centimetro</option
																	>
																	<option
																		value="in"
																		>Pulgada</option
																	>
																	<option
																		value="ft"
																		>Pies</option
																	>
																	<option
																		value="yd"
																		>Yardas</option
																	>
																	<option
																		value="mi"
																		>Millas</option
																	>
																</select>
															</div>
															<input
																type="number"
																name="height"
																id="height"
																class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
																placeholder="0.00"
																min="0.01"
																value="0.00"
																step="any"
															/>
														</div>
													</div>

													<div
														class="mb-4"
														id="depthField"
													>
														<label
															for="depth"
															class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
															>Pofundidad</label
														>
														<div class="relative">
															<div
																class="absolute inset-y-0 end-0 flex items-center"
															>
																<select
																	name="measureUnit"
																	id="measureUnit"
																	class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 select2"
																>
																	<option
																		value="mm"
																		selected=""
																		>Milimetro</option
																	>
																	<option
																		value="cm"
																		>Centimetro</option
																	>
																	<option
																		value="in"
																		>Pulgada</option
																	>
																	<option
																		value="ft"
																		>Pies</option
																	>
																	<option
																		value="yd"
																		>Yardas</option
																	>
																	<option
																		value="mi"
																		>Millas</option
																	>
																</select>
															</div>
															<input
																type="number"
																name="depth"
																id="depth"
																class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
																placeholder="0.00"
																min="0.01"
																value="0.00"
																step="any"
															/>
														</div>
													</div>

													<div
														class="mb-4"
														id="outterDiameterField"
													>
														<label
															for="outterDiameter"
															class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
															>Diametro Externo</label
														>
														<div class="relative">
															<div
																class="absolute inset-y-0 end-0 flex items-center"
															>
																<select
																	name="measureUnit"
																	id="measureUnit"
																	class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 select2"
																>
																	<option
																		value="mm"
																		selected=""
																		>Milimetro</option
																	>
																	<option
																		value="cm"
																		>Centimetro</option
																	>
																	<option
																		value="in"
																		>Pulgada</option
																	>
																	<option
																		value="ft"
																		>Pies</option
																	>
																	<option
																		value="yd"
																		>Yardas</option
																	>
																	<option
																		value="mi"
																		>Millas</option
																	>
																</select>
															</div>
															<input
																type="number"
																name="outterDiameter"
																id="outterDiameter"
																class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
																placeholder="0.00"
																min="0.01"
																value="0.00"
																step="any"
															/>
														</div>
													</div>

													<div
														class="mb-4"
														id="innerDiameterField"
													>
														<label
															for="innerDiameter"
															class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
															>Diametro Interno</label
														>
														<div class="relative">
															<div
																class="absolute inset-y-0 end-0 flex items-center"
															>
																<select
																	name="measureUnit"
																	id="measureUnit"
																	class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 select2"
																>
																	<option
																		value="mm"
																		selected=""
																		>Milimetro</option
																	>
																	<option
																		value="cm"
																		>Centimetro</option
																	>
																	<option
																		value="in"
																		>Pulgada</option
																	>
																	<option
																		value="ft"
																		>Pies</option
																	>
																	<option
																		value="yd"
																		>Yardas</option
																	>
																	<option
																		value="mi"
																		>Millas</option
																	>
																</select>
															</div>
															<input
																type="number"
																name="innerDiameter"
																id="innerDiameter"
																class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
																placeholder="0.00"
																min="0.01"
																value="0.00"
																step="any"
															/>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
						</section>
						{
							/*
			<div>
				<button
					type="submit"
					class="inline-flex justify-center rounded-md border border-transparent bg-secondary-400 py-2 px-4 text-sm font-medium text-gray-100 shadow-sm hover:bg-secondary-500 focus:outline-none focus:ring-2 focus:ring-secondary-500 focus:ring-offset-2"
				>
					Crear Marca
				</button>
			</div>*/
						}
					</form>
				</div>
			</div>
			<script>
				import { generateName } from "../../lib/utils/functions";
				import {
					showSuccess,
					showError,
				} from "../../lib/utils/notifications";
				import { uploadFile } from "../../lib/utils/upload";

				// Get all required elements
				const commonNameSelect = document.getElementById(
					"productCommonName",
				) as HTMLSelectElement;
				const typeSelect = document.getElementById(
					"productType",
				) as HTMLSelectElement;
				const brandSelect = document.getElementById(
					"productBrand",
				) as HTMLSelectElement;
				const mpnInput = document.getElementById(
					"productMPN",
				) as HTMLInputElement;
				const skuInput = document.getElementById(
					"productSKU",
				) as HTMLInputElement;
				const nameInput = document.getElementById(
					"productName",
				) as HTMLInputElement;
				const upcInput = document.getElementById(
					"productUPC",
				) as HTMLInputElement;
				const eanInput = document.getElementById(
					"productEAN",
				) as HTMLInputElement;
				const productIdInput = document.getElementById(
					"productId",
				) as HTMLInputElement;
				const productDescription = document.getElementById(
					"productDesc",
				) as HTMLElement;
				const CubicObject = document.getElementById(
					"objectCubicShape",
				) as HTMLInputElement;
				const CylinderObject = document.getElementById(
					"objectCylinder",
				) as HTMLInputElement;
				const diameterInner =
					document.getElementById("innerDiameterField");
				const diameterOutter = document.getElementById(
					"outterDiameterField",
				);
				const depth = document.getElementById("depthField");
				const height = document.getElementById("heightField");
				const width = document.getElementById("widthField");

				if (depth) depth.style.display = "none";
				if (height) height.style.display = "none";
				if (width) width.style.display = "none";
				if (diameterInner) diameterInner.style.display = "none";
				if (diameterOutter) diameterOutter.style.display = "none";

				let currentMetadata: any[] = [];
				async function fetchMetadataDescription(data: any[]) {
					try {
						currentMetadata = data;
						renderMetadataGroups(data);
					} catch (error) {
						console.error(
							"Error fetching metadata description:",
							error,
						);
						if (productDescription) {
							productDescription.innerHTML =
								'<p class="text-sm text-red-500">Error loading metadata. Please try again.</p>';
						}
					}
				}

				function renderMetadataGroups(groups: any[]) {
					if (!productDescription) return;

					if (groups.length === 0) {
						productDescription.innerHTML =
							'<p class="text-sm text-gray-500">El nombre común no tiene metadatos.</p>';
						return;
					}
					/* 
					{
						id: 9,
						name: 'Tipo de Memoria',
						position: 1,
						active: true,
						allow_description: true,
						is_feature: false,
						format: null,
						tooltip: 'Según especificaciones técnicas, digite o seleccione el tipo de memoria RAM',
						id_group: null,
						created_at: 2024-12-14T17:53:51.000Z,
						updated_at: 2024-12-17T19:02:25.089Z
					} */
					productDescription.innerHTML = groups
						.map(
							(group) => `
								<div class="rounded-lg p-6">
									<h3 class="text-lg font-medium text-gray-900 mb-4">${group.name}</h3>
									<div class="space-y-4">
										${group.metadata
											.map(
												(meta: any) => `
													<div>
														<label for="metadata_${meta.id}" class="block text-sm font-medium text-gray-700">
															${meta.name}
															${meta.tooltip ? `<span class="text-gray-500 text-xs ml-1" title="${meta.tooltip}">ⓘ</span>` : ""}
														</label>
														<div class="mt-1 flex rounded-md shadow-sm">
															<input
																type="text"
																id="metadata_${meta.id}"
																name="metadata_${meta.id}"
																class="flex-1 rounded-l-md border-gray-300 focus:border-primary-500 focus:ring-primary-500"
																${meta.format ? `pattern="${meta.format}"` : ""}
															/>
															<button
																type="button"
																data-metadata-id="${meta.id}"
																class="save-metadata-btn inline-flex items-center px-4 py-2 border border-l-0 border-gray-300 rounded-r-md bg-gray-50 text-sm font-medium text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-1 focus:ring-primary-500"
															>
																Save
															</button>
														</div>
														<div class="relative">
															<input
																type="text"
																id="metadata_${meta.id}"
																class="block w-full p-2.5 ps-10 text-sm border rounded-lg shadow-sm text-gray-900 bg-gray-100 border-gray-400 focus:ring-blue-500 focus:border-blue-500 dark:text-gray-200 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-blue-600 dark:focus:border-blue-600"
															/>
															<div class="absolute inset-y-0 end-0 flex items-center ps-3.5">
																<button
																	class="mr-2 bg-transparent text-green-600 hover:text-green-500 dark:hover:text-green-300 dark:text-green-400 font-medium"
																	type="button"
																	id="saveinput_${meta.id}"
																	title="Guardar"
																	data-toggle="tooltip"
																	onclick="saveMetadataValue(${meta.id})"
																>
																	<span class="material-symbols-outlined"> save </span>
																</button>
																<button
																	class="mr-2 bg-transparent text-secondary-600 hover:text-secondary-700 dark:text-secondary-700 dark:hover:text-secondary-800 font-medium"
																	type="button"
																	id="redoinput_${meta.id}"
																	title="Re-hacer"
																	data-toggle="tooltip"
																	onclick="redoMetadataValue(${meta.id})"
																>
																	<span class="material-symbols-outlined">
																		undo
																	</span>
																</button>
																<button
																	class="test-gray-500"
																	type="button"
																	id="cleaninput_${meta.id}"
																	title="Limpiar"
																	data-toggle="tooltip"
																	onclick="cleanMetadataValue(${meta.id})"
																>
																	<span class="material-symbols-outlined"> cleaning_services </span>
																</button>
															</div>
														</div>
													</div>`,
											)
											.join("")}
									</div>
								</div>`,
						)
						.join("");
				}

				async function saveMetadataValue(metadataId: number) {
					const productId = (
						document.getElementById("id") as HTMLInputElement
					).value;
					const value = (
						document.getElementById(
							`metadata_${metadataId}`,
						) as HTMLInputElement
					).value;

					if (!productId) {
						alert("Please save the product first");
						return;
					}

					try {
						const response = await fetch(
							"/api/metadata/metadata-values",
							{
								method: "POST",
								headers: {
									"Content-Type": "application/json",
								},
								body: JSON.stringify({
									product_id: productId,
									metadata_id: metadataId,
									value,
								}),
							},
						);

						if (!response.ok) {
							throw new Error("Failed to save metadata value");
						}

						alert("Metadata value saved successfully");
					} catch (error) {
						console.error("Error saving metadata value:", error);
						alert("Failed to save metadata value");
					}
				}

				async function cleanMetadataValue(metadataId: number) {
					const productId = (
						document.getElementById("id") as HTMLInputElement
					).value;
					const value = (
						document.getElementById(
							`metadata_${metadataId}`,
						) as HTMLInputElement
					).value;

					if (!productId) {
						alert("Please save the product first");
						return;
					}

					try {
						const response = await fetch(
							"/api/metadata/metadata-values",
							{
								method: "POST",
								headers: {
									"Content-Type": "application/json",
								},
								body: JSON.stringify({
									product_id: productId,
									metadata_id: metadataId,
									value,
								}),
							},
						);

						if (!response.ok) {
							throw new Error("Failed to save metadata value");
						}

						alert("Metadata value saved successfully");
					} catch (error) {
						console.error("Error saving metadata value:", error);
						alert("Failed to save metadata value");
					}
				}

				// Function to update product name
				const updateProductName = () => {
					generateName(
						commonNameSelect,
						typeSelect,
						brandSelect,
						mpnInput,
						skuInput,
						nameInput,
					);
				};

				// Get Description form usign the common name

				const getDescriptionByCommonName = async () => {
					updateProductName();
					const productId = productIdInput.value;
					const commonNameId = commonNameSelect.value;
					const description =
						commonNameSelect.options[Number(commonNameId)].dataset
							.description;
					const categories =
						commonNameSelect.options[Number(commonNameId)].dataset
							.categories;
					if (description) {
						try {
							const response = await fetch(
								"/api/metadata/description",
								{
									method: "POST",
									headers: {
										"Content-Type": "application/json",
									},
									body: JSON.stringify({
										product: productId,
										common_names: commonNameId,
										categories: categories,
									}),
								},
							);
							if (response.ok) {
								const data = await response.json();
								fetchMetadataDescription(data);
							}
						} catch (error) {
							console.error("Error:", error);
						}
					}

					async function fetchData(url: string) {
						try {
							const response = await fetch(url);
							if (!response.ok) {
								throw new Error(
									`HTTP error! status: ${response.status}`,
								);
							}
							const data = await response.json();
							return data;
						} catch (error) {
							console.error("Error fetching data:", error);
							return [];
						}
					}
				};

				const getDescriptionByType = async () => {
					updateProductName();
					const description = commonNameSelect.dataset.description;
					if (description) {
						try {
							const response = await fetch(
								"/api/metadata/description",
								{
									method: "POST",
									headers: {
										"Content-Type": "application/json",
									},
									body: JSON.stringify({
										product: productIdInput.value,
										common_names: commonNameSelect.value,
										categories: typeSelect.value,
										product_type: typeSelect.value,
									}),
								},
							);
							if (response.ok) {
								const data = await response.json();
								fetchMetadataDescription(data);
							}
						} catch (error) {
							console.error("Error:", error);
						}
					}
				};

				// Hide measure elements
				function hideFields(typo: string) {
					if (typo === "cylinder") {
						if (diameterInner) diameterInner.style.display = "none";
						if (diameterOutter)
							diameterOutter.style.display = "none";
						if (depth) depth.style.display = "block";
						if (height) height.style.display = "block";
						if (width) width.style.display = "block";
						CubicObject.checked = false;
					} else if (typo === "cubic") {
						if (diameterInner)
							diameterInner.style.display = "block";
						if (diameterOutter)
							diameterOutter.style.display = "block";
						if (depth) depth.style.display = "block";
						if (height) height.style.display = "none";
						if (width) width.style.display = "none";
						CylinderObject.checked = false;
					}
				}

				// Add event listeners
				commonNameSelect.addEventListener(
					"change",
					getDescriptionByCommonName,
				);
				typeSelect.addEventListener("change", getDescriptionByType);
				brandSelect.addEventListener("change", updateProductName);
				mpnInput.addEventListener("keyup", updateProductName);
				skuInput.addEventListener("keyup", updateProductName);
				upcInput.addEventListener("keyup", updateProductName);
				CubicObject.addEventListener("change", () => {
					hideFields("cubic");
				});
				CylinderObject.addEventListener("change", () => {
					hideFields("cylinder");
				});
				const generalInfo = document.getElementById("btnAddProduct");

				// Initialize MPN and SKU generation buttons
				const mpnGenButton = document.getElementById(
					"productMPNGenButton",
				);
				const skuGenButton = document.getElementById(
					"productSKUGenButton",
				);
				const upcGenButton = document.getElementById(
					"productUPCGenButton",
				);

				mpnGenButton?.addEventListener("click", async (e) => {
					e.preventDefault();
					try {
						const response = await fetch(
							"/api/products/mpn/exists",
						).then((res) => res.text());
						if (response) {
							mpnInput.value = response;
						}
					} catch (error) {
						console.error("Error:", error);
					}
					updateProductName();
				});

				skuGenButton?.addEventListener("click", async (e) => {
					e.preventDefault();
					try {
						const response = await fetch(
							"/api/products/sku/exists",
						).then((res) => res.text());
						if (response) {
							skuInput.value = response;
						}
					} catch (error) {
						console.error("Error:", error);
					}
					updateProductName();
				});

				upcGenButton?.addEventListener("click", async (e) => {
					e.preventDefault();
					try {
						const response = await fetch(
							"/api/products/upc/exists",
						).then((res) => res.text());
						if (response) {
							upcInput.value = response;
							eanInput.value = response;
						}
					} catch (error) {
						console.error("Error: ", error);
					}
					updateProductName();
				});

				const form = document.getElementById("createForm");
				generalInfo?.addEventListener("click", async (e) => {
					e.preventDefault();
					const formData = new FormData(form as HTMLFormElement);
					const logoFile = (
						document.getElementById(
							"productImage",
						) as HTMLInputElement
					).files?.[0];
					try {
						let logoUrl = null;
						if (logoFile) {
							logoUrl = await uploadFile(logoFile);
						}

						const data = {
							name: formData.get("productName"),
							common: formData.get("productCommonName"),
							logo: logoUrl,
							active: formData.get("productActive") === "on",
							refurbished: formData.get("productUsed") === "on",
							type: formData.get("productType"),
							brand: formData.get("productBrand"),
							mpn: formData.get("productMPN"),
							sku: formData.get("productSKU"),
							upc: formData.get("productUPC"),
							ean: formData.get("productEAN"),
							info: "general",
						};

						const response = await fetch("/api/products", {
							method: "POST",
							headers: {
								"Content-Type": "application/json",
							},
							body: JSON.stringify(data),
						});

						if (response.ok) {
							showSuccess("Producto creado exitosamente");
							window.location.href = "/products";
						} else {
							const error = await response.json();
							showError(
								error.message || "Error al crear producto",
							);
						}
					} catch (error) {
						console.error("Error:", error);
						showError("Error al crear producto");
					}
				});
			</script>
			<script>
				// commonNameSelect?.addEventListener("change", async () => {
				// 	const commonNameId = commonNameSelect.value;
				// 	if (!commonNameId) {
				// 		categorySelect.disabled = true;
				// 		productTypeSelect.disabled = true;
				// 		categorySelect.innerHTML =
				// 			'<option value="">Select Category</option>';
				// 		productTypeSelect.innerHTML =
				// 			'<option value="">Select Product Type</option>';
				// 		return;
				// 	}

				// 	const categories = await fetchData(
				// 		`/api/categories?commonNameId=${commonNameId}`,
				// 	);

				// 	categorySelect.innerHTML =
				// 		'<option value="">Select Category</option>';
				// 	categories.forEach((category: any) => {
				// 		const option = document.createElement("option");
				// 		option.value = category.id;
				// 		option.textContent = category.name;
				// 		categorySelect.appendChild(option);
				// 	});

				// 	categorySelect.disabled = false;
				// 	productTypeSelect.disabled = true;
				// 	productTypeSelect.innerHTML =
				// 		'<option value="">Select Product Type</option>';
				// });

				// categorySelect?.addEventListener("change", async () => {
				// 	const categoryId = categorySelect.value;
				// 	if (!categoryId) {
				// 		productTypeSelect.disabled = true;
				// 		productTypeSelect.innerHTML =
				// 			'<option value="">Select Product Type</option>';
				// 		return;
				// 	}

				// 	const productTypes = await fetchData(
				// 		`/api/product-types?categoryId=${categoryId}`,
				// 	);

				// 	productTypeSelect.innerHTML =
				// 		'<option value="">Select Product Type</option>';
				// 	productTypes.forEach((productType: any) => {
				// 		const option = document.createElement("option");
				// 		option.value = productType.id;
				// 		option.textContent = productType.name;
				// 		productTypeSelect.appendChild(option);
				// 	});

				// 	productTypeSelect.disabled = false;
				// });

				// async function saveAll() {
				// 	const productId = (
				// 		document.getElementById("id") as HTMLInputElement
				// 	).value;

				// 	if (!productId) {
				// 		const saved = await saveProduct();
				// 		if (!saved) {
				// 			alert("Failed to save product");
				// 			return;
				// 		}
				// 	}

				// 	const metadataValues = currentMetadata
				// 		.flatMap((group) =>
				// 			group.metadata.map((meta: any) => ({
				// 				id: meta.id,
				// 				value:
				// 					(
				// 						document.getElementById(
				// 							`metadata_${meta.id}`,
				// 						) as HTMLInputElement
				// 					)?.value || "",
				// 			})),
				// 		)
				// 		.filter((mv) => mv.value.trim() !== "");

				// 	try {
				// 		const response = await fetch(
				// 			"/api/metadata-values/batch",
				// 			{
				// 				method: "POST",
				// 				headers: {
				// 					"Content-Type": "application/json",
				// 				},
				// 				body: JSON.stringify({
				// 					product_id: productId,
				// 					values: metadataValues,
				// 				}),
				// 			},
				// 		);

				// 		if (!response.ok) {
				// 			throw new Error("Failed to save metadata values");
				// 		}

				// 		alert("All values saved successfully");
				// 		window.location.href = "/products";
				// 	} catch (error) {
				// 		console.error("Error saving metadata values:", error);
				// 		alert("Failed to save metadata values");
				// 	}
				// }
			</script>
		</div>
	</div>
</BaseLayout>
