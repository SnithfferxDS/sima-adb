---
import { db, Product } from "astro:db";
const products = await db.select().from(Product).all();
---

<table class="min-w-full divide-y divide-slate-300">
	<thead class="bg-slate-900 text-white">
		<tr>
			<tr>
				<th>
					<span class="material-symbols-outlined"> image </span>
				</th>
				<th
					scope="col"
					class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold"
					>Producto</th
				>
				<th
					scope="col"
					class="px-3 py-3.5 text-left text-sm font-semibold">UPC</th
				>
				<th
					scope="col"
					class="px-3 py-3.5 text-left text-sm font-semibold"
					>Brand</th
				>
				<th
					scope="col"
					class="px-3 py-3.5 text-left text-sm font-semibold"
					>Stock</th
				>
				<th
					scope="col"
					class="px-3 py-3.5 text-left text-sm font-semibold"
					>Price</th
				>
				<th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6">
					<span class="sr-only">Actions</span>
				</th>
			</tr>
		</tr>
	</thead>
	<tbody
		class="divide-y divide-slate-300 bg-gray-200 dark:divide-slate-700 dark:bg-slate-600"
	>
		{
			products.map((product) => (
				<tr>
					<td>
						<img
							src="/assets/img/no_photo.png"
							alt="Product Image"
							class="w-20 h-20 rounded-lg object-cover"
						/>
					</td>
					<td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-slate-900 dark:text-gray-100">
						<div class="p-1">
							<h3 class="font-semibold">
								<a
									href={`/products/${product.id}/details`}
									class="text-primary-600 dark:text-primary-300"
								>
									{product.name}
								</a>
							</h3>
							<div class="flex justify-center mt-2">
								<span class="text-primary-300 dark:text-primary-800">
									SKU: {product.sku}
								</span>
								<span class="text-primary-300 dark:text-primary-800">
									MPN: {product.mpn}
								</span>
							</div>
						</div>
					</td>
					<td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-slate-900 dark:text-gray-100">
						{product.upc}
					</td>
					<td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-slate-900 dark:text-gray-100">
						Product Brand
					</td>
					<td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-slate-900 dark:text-gray-100">
						<span class="text-blue-600">Stock: 0</span>
					</td>
					<td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-slate-900 dark:text-gray-100">
						<span class="text-green-600">$ 0.00</span>
					</td>
					<td>
						<div class="mt-2 space-x-2">
							<button
								onclick={`handleTransaction(${product.id}, 'sale')`}
								class="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600 disabled:bg-gray-400"
							>
								Sell
							</button>
							<button
								onclick={`handleTransaction(${product.id}, 'purchase')`}
								class="bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600"
							>
								Purchase
							</button>
						</div>
					</td>
				</tr>
			))
		}
	</tbody>
</table>

<script>
	async function handleTransaction(productId: Number, type: String) {
		const userInput = prompt(`Enter quantity to ${type}:`);
		if (!userInput) return;
		const quantity = parseInt(userInput);
		if (isNaN(quantity) || quantity <= 0) {
			alert("Please enter a valid quantity");
			return;
		}

		const price = parseFloat(prompt(`Enter price per unit:`) || "0");
		if (!price || isNaN(price) || price <= 0) {
			alert("Please enter a valid price");
			return;
		}

		try {
			const response = await fetch(
				"http://localhost:3000/api/transactions",
				{
					method: "POST",
					headers: {
						"Content-Type": "application/json",
					},
					body: JSON.stringify({
						product_id: productId,
						type,
						quantity: quantity,
						price: price,
					}),
				},
			);

			if (!response.ok) {
				throw new Error(`HTTP error! status: ${response.status}`);
			}
		} catch (error) {
			console.error("Error processing transaction:", error);
			alert("Error processing transaction. Please try again.");
		}
	}

	const deleteButtons = document.querySelectorAll(".delete-btn");
	deleteButtons.forEach((button) => {
		button.addEventListener("click", async () => {
			if (confirm("¿Está seguro de querer borrar este producto?")) {
				const id = button.getAttribute("data-id");
				try {
					const response = await fetch(`/api/products/${id}`, {
						method: "DELETE",
					});
					if (response.ok) {
						window.location.reload();
					}
				} catch (error) {
					console.error("Error:", error);
				}
			}
		});
	});
</script>
