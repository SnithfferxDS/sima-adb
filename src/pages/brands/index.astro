---
import Layout from "../../layouts/app.layout.astro";
import AstroTable from "@Components/Table.astro";
import BreadCrumbs from "@Components/BreadCrumbs.astro";
import FileUpload from "@Components/FileUpload.astro";
import { db, Brand } from "astro:db";

const brands = await db.select().from(Brand).all();

const breadcrumbs = [
	{
		label: "Marcas",
		path: "/brands",
	},
];
---

<Layout title="Brands">
	<div
		class="shadow-md rounded-lg overflow-hidden transition-shadow hover:shadow-lg"
	>
		<div
			class="p-4 block sm:flex items-center justify-between border-b border-gray-200 lg:mt-1.5"
		>
			<div class="w-full mb-1">
				<BreadCrumbs
					routes={breadcrumbs}
					currentRoute={Astro.url.pathname}
					headerTitle="Marcas"
				/>
				<div class="items-center justify-between flex">
					<div
						class="flex items-center mb-4 sm:mb-0 ml-auto space-x-1 sm:space-x-2"
					>
						<button
							class="inline-flex
								items-center
								justify-center
								w-1/2
								px-3
								py-2
								text-sm
								font-medium
								text-center
								rounded-lg
								focus:ring-4
								sm:w-auto
								text-white
								bg-purple-700
								hover:bg-purple-800
								focus:ring-purple-300
								dark:bg-purple-600
								dark:hover:bg-purple-700
								dark:focus:ring-purple-800"
							data-drawer-target="drawer-create-default"
							data-drawer-show="drawer-create-default"
							aria-controls="drawer-create-default"
							data-drawer-placement="right"
						>
							<svg
								class="w-5 h-5 sm:mr-2 sm:-ml-1"
								fill="currentColor"
								viewBox="0 0 20 20"
								xmlns="http://www.w3.org/2000/svg"
								><path
									fill-rule="evenodd"
									d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z"
									clip-rule="evenodd"></path></svg
							>
							<span class="hidden md:block">Agregar</span>
						</button>
					</div>
				</div>
			</div>
		</div>
		<div class="flex flex-col">
			<div class="overflow-x-auto">
				<div class="inline-block min-w-full align-middle">
					<div class="mt-8 flex flex-col">
						<div
							class="-my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8"
						>
							<div
								class="inline-block min-w-full py-2 align-middle md:px-6 lg:px-8"
							>
								<div
									class="flex
								justify-between
								items-center
								mb-6
								p-6
								overflow-hidden
								ring-1
								ring-opacity-5
								shadow-purple-600/25
								bg-secondary-800/50
								text-white
								dark:bg-gray-800/25
								ring-black
								rounded-md"
								>
									<AstroTable
										resource="brands"
										data={brands}
										columns={[
											{
												name: "id",
												label: "ID",
												sortable: true,
											},
											{
												name: "name",
												label: "Nombre",
												sortable: true,
											},
											{
												name: "description",
												label: "Descripción",
												sortable: true,
											},
											{
												name: "active",
												label: "Activo",
												sortable: true,
											},
										]}
									/>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
	<!-- Create new Brands -->
	<div
		id="drawer-create-default"
		class="fixed
				top-0
				right-0
				z-40
				w-full
				h-screen
				max-w-xs
				p-6
				overflow-y-auto
				transition-transform
				translate-x-full
				rounded-l-md
				bg-primary-800/50
				dark:bg-primary-700/50
				shadow-purple-500/50"
		tabindex="-1"
		aria-labelledby="drawer-label"
		aria-hidden="true"
	>
		<h5
			id="drawer-label"
			class="inline-flex items-center mb-6 text-sm font-semibold text-gray-500 uppercase dark:text-gray-400"
		>
			Nueva Marca
		</h5>
		<button
			type="button"
			data-drawer-dismiss="drawer-create-default"
			aria-controls="drawer-create-default"
			class="text-gray-400 bg-transparent hover:bg-danger-200 hover:text-danger-900 rounded-lg text-sm p-1.5 absolute top-2.5 right-2.5 inline-flex items-center dark:hover:bg-danger-600 dark:hover:text-white"
		>
			<svg
				aria-hidden="true"
				class="w-5 h-5 -ml-1 sm:mr-1"
				fill="none"
				stroke="currentColor"
				viewBox="0 0 24 24"
				xmlns="http://www.w3.org/2000/svg"
				><path
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="2"
					d="M6 18L18 6M6 6l12 12"></path></svg
			>
			Cancelar
		</button>
		<form id="createForm" class="max-w-lg rounded-lg shadow p-6">
			<div class="mb-4">
				<label
					for="name"
					class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
					>Nombre</label
				>
				<input
					type="text"
					name="name"
					id="name"
					required
					class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
					placeholder="Brand Name"
				/>
			</div>

			<div class="mb-4">
				<label
					for="description"
					class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
					>Descripción</label
				>
				<textarea
					id="description"
					name="description"
					rows="3"
					class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
					placeholder="Brand Description"></textarea>
			</div>

			<FileUpload id="logo" label="Logo" accept="image/*" />

			<div class="mb-4">
				<label class="relative inline-flex items-center cursor-pointer">
					<input
						type="checkbox"
						id="active"
						name="active"
						class="sr-only peer"
						checked
					/>
					<div
						class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary-300 dark:peer-focus:ring-primary-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary-600"
					>
					</div>
					<span
						class="ms-3 text-sm font-medium text-gray-900 dark:text-gray-300"
						>Activa</span
					>
				</label>
			</div>

			<div class="flex justify-end space-x-4">
				<button
					type="button"
					data-drawer-dismiss="drawer-create-default"
					aria-controls="drawer-create-default"
					class="px-4 py-2 text-gray-200 bg-danger-400 rounded-md hover:bg-danger-500"
				>
					Cancelar
				</button>
				<button
					type="submit"
					class="px-4 py-2 text-white bg-primary-500 rounded-md hover:bg-primary-600"
				>
					Crear
				</button>
			</div>
		</form>
	</div>
</Layout>

<script>
	import { showSuccess, showError } from "../../lib/utils/notifications";
	import { uploadFile } from "../../lib/utils/upload";

	const deleteButtons = document.querySelectorAll(".delete-btn");
	deleteButtons.forEach((button) => {
		button.addEventListener("click", async () => {
			if (confirm("Are you sure you want to delete this brand?")) {
				const id = button.getAttribute("data-id");
				try {
					const response = await fetch(`/api/brands/${id}`, {
						method: "DELETE",
					});
					if (response.ok) {
						window.location.reload();
					}
				} catch (error) {
					console.error("Error:", error);
				}
			}
		});
	});
	const form = document.getElementById("createForm");
	form?.addEventListener("submit", async (e) => {
		e.preventDefault();
		const formData = new FormData(form as HTMLFormElement);
		const logoFile = (document.getElementById("logo") as HTMLInputElement)
			.files?.[0];

		try {
			let logoUrl = null;
			if (logoFile) {
				logoUrl = await uploadFile(logoFile);
			}

			const data = {
				name: formData.get("name"),
				description: formData.get("description"),
				logo: logoUrl,
				active: formData.get("active") === "on",
			};

			const response = await fetch("/api/brands", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify(data),
			});

			if (response.ok) {
				showSuccess("Brand created successfully");
				// close the drawer
				document.getElementById("drawer-create-default")?.remove();
			} else {
				const error = await response.json();
				showError(error.message || "Failed to create brand");
			}
		} catch (error) {
			console.error("Error:", error);
			showError("An unexpected error occurred");
		}
	});
</script>
