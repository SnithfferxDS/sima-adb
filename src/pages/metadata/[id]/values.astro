---
import Layout from "../../../layouts/app.layout.astro";
import { db, eq, Metadata, MetadataValue } from "astro:db";
import BreadCrumbs from "../../../components/BreadCrumbs.astro";

const { id } = Astro.params;
const metadata = await db
	.select()
	.from(Metadata)
	.where(eq(Metadata.id, parseInt(id!)))
	.get();
const values = await db
	.select()
	.from(MetadataValue)
	.where(eq(MetadataValue.metadata_id, parseInt(id!)))
	.orderBy(MetadataValue.metadata_value);

if (!metadata) {
	return Astro.redirect("/metadata");
}

const breadcrumbs = [
	{
		lable: "Metadata",
		path: "/metadata",
	},
	{
		lable: "Values",
		path: `/metadata/${id}/values`,
	},
];
---

<Layout title={`Metadata Values - ${metadata.name}`}>
	<div
		class="shadow-md rounded-lg overflow-hidden transition-shadow hover:shadow-lg"
	>
		<div
			class="p-4 block sm:flex items-center justify-between border-b border-gray-200 lg:mt-1.5"
		>
			<div class="w-full mb-1">
				<BreadCrumbs
					routes={breadcrumbs}
					currentRoute={Astro.url.pathname}
					headerTitle={`Metadata Values - ${metadata.name}`}
				/>
				<div class="items-center justify-between flex">
					{
						/* <div class="flex items-center mb-4 sm:mb-0">
						<Search
							action="search"
							id="commonNamesSearch"
							placeholder="en nombres comunes"
							method="get"
						/>
					</div> */
					}

					<div
						class="flex items-center mb-4 sm:mb-0 ml-auto space-x-1 sm:space-x-2"
					>
						<button
							type="button"
							id="addValueBtn"
							class="inline-flex
							items-center
							justify-center
							w-1/2
							px-3
							py-2
							text-sm
							font-medium
							text-center
							rounded-lg
							focus:ring-4
							sm:w-auto
							text-white
							bg-purple-700
							hover:bg-purple-800
							focus:ring-purple-300
							dark:bg-purple-600
							dark:hover:bg-purple-700
							dark:focus:ring-purple-800"
						>
							<svg
								class="w-5 h-5 sm:mr-2 sm:-ml-1"
								fill="currentColor"
								viewBox="0 0 20 20"
								xmlns="http://www.w3.org/2000/svg"
								><path
									fill-rule="evenodd"
									d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z"
									clip-rule="evenodd"></path></svg
							>
							<span class="hidden md:block">Agregar</span>
						</button>
					</div>
				</div>
			</div>
		</div>
		<div class="flex flex-col">
			<div class="overflow-x-auto">
				<div class="inline-block min-w-full align-middle">
					<table
						class="min-w-full divide-y divide-gray-200"
						id="default-table"
					>
						<thead class="bg-gray-800 text-white">
							<tr>
								<th
									class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
									>Value</th
								>
								<th
									class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
									>Status</th
								>
								<th
									class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
									>Allow Description</th
								>
								<th
									class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
									>Actions</th
								>
							</tr>
						</thead>
						<tbody
							class="divide-y divide-slate-300 dark:divide-slate-400"
						>
							{
								values.map((value) => (
									<tr class="hover:bg-gray-50/50">
										<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-100">
											{value.metadata_value}
										</td>
										<td class="px-6 py-4 whitespace-nowrap">
											<span
												class={`px-2 py-1 rounded-full text-xs ${value.active ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"}`}
											>
												{value.active
													? "Active"
													: "Inactive"}
											</span>
										</td>
										<td class="px-6 py-4 whitespace-nowrap">
											<span
												class={`px-2 py-1 rounded-full text-xs ${value.allow_description ? "bg-blue-100 text-blue-800" : "bg-red-100 text-red-800"}`}
											>
												{value.allow_description
													? "Yes"
													: "No"}
											</span>
										</td>
										<td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
											<div
												class="inline-flex rounded-md shadow-sm"
												role="group"
											>
												<button
													class="px-1 
                                                    py-1
                                                    text-sm 
                                                    font-medium 
                                                    rounded-s-lg 
                                                    focus:z-10 
                                                    focus:ring-2 
                                                    text-warning-400 
                                                    hover:bg-warning-800 
                                                    hover:text-warning-400
                                                    focus:ring-orange-600 
                                                    focus:text-warning-300"
													data-value={JSON.stringify(
														value,
													)}
												>
													<span class="sr-only">
														Edit
													</span>
													<svg
														xmlns="http://www.w3.org/2000/svg"
														class="w-6 h-6"
														aria-hidden="true"
														fill="currentColor"
														viewBox="0 -960 960 960"
													>
														<path d="M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h357l-80 80H200v560h560v-278l80-80v358q0 33-23.5 56.5T760-120H200Zm280-360ZM360-360v-170l367-367q12-12 27-18t30-6q16 0 30.5 6t26.5 18l56 57q11 12 17 26.5t6 29.5q0 15-5.5 29.5T897-728L530-360H360Zm481-424-56-56 56 56ZM440-440h56l232-232-28-28-29-28-231 231v57Zm260-260-29-28 29 28 28 28-28-28Z" />
													</svg>
												</button>
												<form
													method="POST"
													action={`/metadata/${metadata.id}/values/${value.metadata_value}/delete`}
													class="inline"
												>
													<button
														type="submit"
														class="px-1 
                                                        py-1
                                                        text-sm 
                                                        font-medium 
                                                        rounded-e-lg 
                                                        focus:z-10 
                                                        focus:ring-2  
                                                        text-danger-400 
                                                        hover:bg-danger-800 
                                                        focus:ring-orange-600 
                                                        focus:text-danger-300 
                                                        delete-btn"
													>
														<span class="sr-only">
															Delete
														</span>
														<svg
															class="w-6 h-6"
															aria-hidden="true"
															xmlns="http://www.w3.org/2000/svg"
															fill="none"
															viewBox="0 0 24 24"
														>
															<path
																stroke="currentColor"
																stroke-linecap="round"
																stroke-linejoin="round"
																stroke-width="2"
																d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
															/>
														</svg>
													</button>
												</form>
											</div>
										</td>
									</tr>
								))
							}
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>

	<!-- Modal for adding/editing values -->
	<div
		id="valueModal"
		class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full"
	>
		<div
			class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white"
		>
			<div class="mt-3">
				<h3
					class="text-lg font-medium text-gray-900 mb-4"
					id="modalTitle"
				>
					Add Value
				</h3>
				<form
					id="valueForm"
					method="POST"
					action={`/metadata/${metadata.id}/values/create`}
				>
					<input type="hidden" name="_method" value="POST" />
					<div class="space-y-4">
						<div>
							<label
								for="value"
								class="block text-sm font-medium text-gray-700"
								>Value</label
							>
							<input
								type="text"
								name="value"
								id="value"
								required
								class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
							/>
						</div>

						<div class="flex items-center">
							<input
								type="checkbox"
								name="active"
								id="active"
								class="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
							/>
							<label
								for="active"
								class="ml-2 block text-sm text-gray-900"
								>Active</label
							>
						</div>

						<div class="flex items-center">
							<input
								type="checkbox"
								name="allow_description"
								id="allow_description"
								class="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
							/>
							<label
								for="allow_description"
								class="ml-2 block text-sm text-gray-900"
								>Allow Description</label
							>
						</div>
					</div>

					<div class="flex justify-end space-x-3 mt-6">
						<button
							type="button"
							id="cancelBtn"
							class="bg-gray-100 text-gray-700 px-4 py-2 rounded hover:bg-gray-200 transition-colors"
						>
							Cancel
						</button>
						<button
							type="submit"
							class="bg-primary text-white px-4 py-2 rounded hover:bg-primary-600 transition-colors"
						>
							Save
						</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</Layout>

<script>
	import { DataTable } from "simple-datatables";

	const dataTable = new DataTable("#default-table", {
		searchable: true,
		sortable: true,
		perPage: 15,
		perPageSelect: [10, 15, 20, 50, 100],
		scrollY: "45vh",
	});
	const modal = document.getElementById("valueModal");
	const addValueBtn = document.getElementById("addValueBtn");
	const cancelBtn = document.getElementById("cancelBtn");
	const valueForm = document.getElementById("valueForm") as HTMLFormElement;
	const modalTitle = document.getElementById("modalTitle");
	const methodInput = document.querySelector(
		'input[name="_method"]',
	) as HTMLInputElement;

	// Show modal for adding new value
	addValueBtn?.addEventListener("click", () => {
		modalTitle!.textContent = "Add Value";
		valueForm!.reset();
		methodInput!.value = "POST";
		modal?.classList.remove("hidden");
	});

	// Handle edit buttons
	document.querySelectorAll(".edit-value").forEach((button) => {
		button.addEventListener("click", () => {
			const value = JSON.parse(
				(button as HTMLButtonElement).dataset.value!,
			);
			modalTitle!.textContent = "Edit Value";
			methodInput!.value = "PUT";

			const valueInput = document.getElementById(
				"value",
			) as HTMLInputElement;
			const activeInput = document.getElementById(
				"active",
			) as HTMLInputElement;
			const allowDescInput = document.getElementById(
				"allow_description",
			) as HTMLInputElement;

			valueInput.value = value.metadata_value;
			activeInput.checked = value.active;
			allowDescInput.checked = value.allow_description;

			valueForm!.action = `/metadata/${value.metadata_id}/values/${value.metadata_value}/update`;
			modal?.classList.remove("hidden");
		});
	});

	// Hide modal
	cancelBtn?.addEventListener("click", () => {
		modal?.classList.add("hidden");
	});

	// Close modal when clicking outside
	modal?.addEventListener("click", (e) => {
		if (e.target === modal) {
			modal.classList.add("hidden");
		}
	});
</script>
