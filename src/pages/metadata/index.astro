---
import Layout from "../../layouts/app.layout.astro";
import BreadCrumbs from "../../components/BreadCrumbs.astro";
import {
	db,
	Metadata,
	MetadataRelations,
	Group,
	Category,
	CommonName,
	ProductType,
	MetadataValue,
} from "astro:db";

interface Categoria {
	id: number;
	name: string;
}
interface NombreComun {
	id: number;
	name: string;
}

interface TipoProducto {
	id: number;
	name: string;
}

interface Valor {
	id: number;
	metadata_id: number;
	metadata_value: string;
}

// Add these interfaces at the top of the file
interface Relations {
	[key: number]: {
		categories: Categoria[];
		commonNames: NombreComun[];
		productTypes: TipoProducto[];
	};
}

interface Values {
	[key: number]: Valor[];
}

// Fetch metadata with all related data
const metadataList = await db.select().from(Metadata).orderBy(Metadata.name);

// Fetch all relations and values
const [relations, values] = await Promise.all([
	db.select().from(MetadataRelations),
	db.select().from(MetadataValue),
]);

// Fetch related data
const [groups, categories, commonNames, productTypes] = await Promise.all([
	db.select().from(Group),
	db.select().from(Category),
	db.select().from(CommonName),
	db.select().from(ProductType),
]);

// Create lookup maps for efficient access
const groupMap = new Map(groups.map((g) => [g.id, g]));
const categoryMap = new Map(categories.map((c) => [c.id, c]));
const commonNameMap = new Map(commonNames.map((cn) => [cn.id, cn]));
const productTypeMap = new Map(productTypes.map((pt) => [pt.id, pt]));

// Organize relations by metadata ID
const relationsByMetadata = relations.reduce<Relations>((acc, rel) => {
	let index = rel.metadata_id;
	if (!acc[index]) {
		acc[index] = {
			categories: [],
			commonNames: [],
			productTypes: [],
		};
	}

	const category = rel.category ? categoryMap.get(rel.category) : null;
	const commonName = rel.common_name
		? commonNameMap.get(rel.common_name)
		: null;
	const productType = rel.product_type
		? productTypeMap.get(rel.product_type)
		: null;

	if (category) acc[index].categories.push(category);
	if (commonName) acc[index].commonNames.push(commonName);
	if (productType) acc[index].productTypes.push(productType);

	return acc;
}, {});

// Organize values by metadata ID
const valuesByMetadata = values.reduce<Values>((acc, val) => {
	if (!acc[val.metadata_id]) {
		acc[val.metadata_id] = [];
	}
	acc[val.metadata_id].push(val);
	return acc;
}, {});

const breadcrumbs = [
	{
		lable: "Metadata",
		path: "/metadata",
	},
];
---

<Layout title="Metadata">
	<div
		class="shadow-md rounded-lg overflow-hidden transition-shadow hover:shadow-lg"
	>
		<div
			class="p-4 block sm:flex items-center justify-between border-b border-gray-200 lg:mt-1.5"
		>
			<div class="w-full mb-1">
				<BreadCrumbs
					routes={breadcrumbs}
					currentRoute={Astro.url.pathname}
					headerTitle="Metadata"
				/>
				<div class="items-center justify-between flex">
					<div
						class="flex items-center mb-4 sm:mb-0 ml-auto space-x-1 sm:space-x-2"
					>
						<a
							href="/metadata/create"
							class="inline-flex
							items-center
							justify-center
							w-1/2
							px-3
							py-2
							text-sm
							font-medium
							text-center
							rounded-lg
							focus:ring-4
							sm:w-auto
							text-white
							bg-purple-700
							hover:bg-purple-800
							focus:ring-purple-300
							dark:bg-purple-600
							dark:hover:bg-purple-700
							dark:focus:ring-purple-800"
						>
							<svg
								class="w-5 h-5 sm:mr-2 sm:-ml-1"
								fill="currentColor"
								viewBox="0 0 20 20"
								xmlns="http://www.w3.org/2000/svg"
								><path
									fill-rule="evenodd"
									d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z"
									clip-rule="evenodd"></path></svg
							>
							<span class="hidden md:block">Agregar</span>
						</a>
					</div>
				</div>
			</div>
		</div>
		<div class="flex flex-col">
			<div class="overflow-x-auto">
				<div class="inline-block min-w-full align-middle">
					<table
						class="min-w-full divide-y divide-gray-200"
						id="default-table"
					>
						<thead class="bg-gray-800 text-white">
							<tr>
								<th
									class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
									>Name</th
								>
								<th
									class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
									>Description</th
								>
								<th
									class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
									>Feature</th
								>
								<th
									class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
									>Format</th
								>
								<th
									class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
									>Values</th
								>
								<th
									class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
									>Group</th
								>
								<th
									class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
									>Relations</th
								>
								<th
									class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
									>Actions</th
								>
							</tr>
						</thead>
						<tbody
							class="divide-y divide-slate-300 dark:divide-slate-400"
						>
							{
								metadataList.map((metadata) => {
									const relations =
										relationsByMetadata[metadata.id] || {};
									const values =
										valuesByMetadata[metadata.id] || [];
									const group = groupMap.get(
										metadata.id_group || 0,
									);

									return (
										<tr class="hover:bg-gray-50/20">
											<td class="px-6 py-4 whitespace-nowrap text-sm">
												{metadata.name}
											</td>
											<td class="px-6 py-4 whitespace-nowrap text-sm">
												<span
													class={`px-2 py-1 rounded-full text-xs ${metadata.allow_description ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"}`}
												>
													{metadata.allow_description
														? "Yes"
														: "No"}
												</span>
											</td>
											<td class="px-6 py-4 whitespace-nowrap text-sm">
												<span
													class={`px-2 py-1 rounded-full text-xs ${metadata.is_feature ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"}`}
												>
													{metadata.is_feature
														? "Yes"
														: "No"}
												</span>
											</td>
											<td class="px-6 py-4 whitespace-nowrap text-sm">
												{metadata.format || "-"}
											</td>
											<td class="px-6 py-4 whitespace-nowrap text-sm">
												<a
													href={`/metadata/${metadata.id}/values`}
													class="text-primary hover:text-primary-600 transition-colors flex items-center gap-2 dark:text-secondary-600 dark:hover:text-secondary-500"
												>
													<span>Manage Values</span>
													<span class="bg-gray-100 text-gray-600 px-2 py-0.5 rounded-full text-xs">
														{values.length}
													</span>
												</a>
											</td>
											<td class="px-6 py-4 whitespace-nowrap text-sm">
												{group?.name || "-"}
											</td>
											<td class="px-6 py-4 text-sm">
												<div class="space-y-1">
													{relations.categories
														?.length > 0 && (
														<div class="flex flex-wrap gap-1">
															{relations.categories.map(
																(cat) => (
																	<span class="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs">
																		{
																			cat.name
																		}
																	</span>
																),
															)}
														</div>
													)}
													{relations.commonNames
														?.length > 0 && (
														<div class="flex flex-wrap gap-1">
															{relations.commonNames.map(
																(cn) => (
																	<span class="px-2 py-1 bg-purple-100 text-purple-800 rounded-full text-xs">
																		{
																			cn.name
																		}
																	</span>
																),
															)}
														</div>
													)}
													{relations.productTypes
														?.length > 0 && (
														<div class="flex flex-wrap gap-1">
															{relations.productTypes.map(
																(pt) => (
																	<span class="px-2 py-1 bg-yellow-100 text-yellow-800 rounded-full text-xs">
																		{
																			pt.name
																		}
																	</span>
																),
															)}
														</div>
													)}
												</div>
											</td>
											<td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
												<div
													class="inline-flex rounded-md shadow-sm"
													role="group"
												>
													<a
														href={`/metadata/${metadata.id}/edit`}
														class="px-1 
                                                    py-1
                                                    text-sm 
                                                    font-medium 
                                                    rounded-s-lg 
                                                    focus:z-10 
                                                    focus:ring-2 
                                                    text-warning-400 
                                                    hover:bg-warning-800 
                                                    hover:text-warning-400
                                                    focus:ring-orange-600 
                                                    focus:text-warning-300"
													>
														<span class="sr-only">
															Edit
														</span>
														<svg
															xmlns="http://www.w3.org/2000/svg"
															class="w-6 h-6"
															aria-hidden="true"
															fill="currentColor"
															viewBox="0 -960 960 960"
														>
															<path d="M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h357l-80 80H200v560h560v-278l80-80v358q0 33-23.5 56.5T760-120H200Zm280-360ZM360-360v-170l367-367q12-12 27-18t30-6q16 0 30.5 6t26.5 18l56 57q11 12 17 26.5t6 29.5q0 15-5.5 29.5T897-728L530-360H360Zm481-424-56-56 56 56ZM440-440h56l232-232-28-28-29-28-231 231v57Zm260-260-29-28 29 28 28 28-28-28Z" />
														</svg>
													</a>
													<a
														href={`/metadata/${metadata.id}/details`}
														class="
														px-1 
														py-1 
														mr-1 
														text-sm 
														font-medium 
														rounded-e-lg 
														focus:z-10 
														focus:ring-2 
														text-success-200 
														dark:text-success-500
														hover:bg-success-800 
														hover:text-success-400 
														focus:ring-success-700 
														focus:text-success-300 
														dark:hover:bg-success-700 
														dark:focus:ring-success-800 
														dark:focus:text-success-300"
													>
														<span class="sr-only">
															Details
														</span>
														<svg
															class="w-6 h-6"
															aria-hidden="true"
															xmlns="http://www.w3.org/2000/svg"
															width="24"
															height="24"
															fill="none"
															viewBox="0 0 24 24"
														>
															<path
																stroke="currentColor"
																stroke-width="2"
																d="M21 12c0 1.2-4.03 6-9 6s-9-4.8-9-6c0-1.2 4.03-6 9-6s9 4.8 9 6Z"
															/>
															<path
																stroke="currentColor"
																stroke-width="2"
																d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"
															/>
														</svg>
													</a>
													<form
														method="POST"
														action={`/metadata/${metadata.id}/delete`}
														class="inline"
													>
														<button
															type="submit"
															class="px-1 
                                                        py-1
                                                        text-sm 
                                                        font-medium 
                                                        rounded-e-lg 
                                                        focus:z-10 
                                                        focus:ring-2  
                                                        text-danger-400 
                                                        hover:bg-danger-800 
                                                        focus:ring-orange-600 
                                                        focus:text-danger-300 
                                                        delete-btn"
														>
															<span class="sr-only">
																Delete
															</span>
															<svg
																class="w-6 h-6"
																aria-hidden="true"
																xmlns="http://www.w3.org/2000/svg"
																fill="none"
																viewBox="0 0 24 24"
															>
																<path
																	stroke="currentColor"
																	stroke-linecap="round"
																	stroke-linejoin="round"
																	stroke-width="2"
																	d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
																/>
															</svg>
														</button>
													</form>
												</div>
											</td>
										</tr>
									);
								})
							}
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
</Layout>
