---
interface Props {
	productId?: string;
}

const { productId } = Astro.props;
---

<div id="metadataDescription" class="space-y-6">
	<h2 class="text-lg font-medium text-gray-900">Descripción</h2>
	<div id="metadataGroups" class="space-y-8">
		<!-- Metadata groups will be inserted here -->
	</div>
</div>

<script>
	let currentMetadata: any[] = [];
	const form = document.querySelector("form");
	const metadataGroups = document.getElementById("metadataGroups");

	async function fetchMetadataDescription() {
		const commonNameSelect = document.getElementById(
			"common_name_id",
		) as HTMLSelectElement;
		const categorySelect = document.getElementById(
			"category_id",
		) as HTMLSelectElement;
		const productTypeSelect = document.getElementById(
			"product_type_id",
		) as HTMLSelectElement;

		if (
			!commonNameSelect?.value ||
			!categorySelect?.value ||
			!productTypeSelect?.value
		) {
			if (metadataGroups) {
				metadataGroups.innerHTML = "";
			}
			return;
		}

		try {
			const response = await fetch(
				`/api/metadata-description?` +
					`commonNameId=${commonNameSelect.value}&` +
					`categoryId=${categorySelect.value}&` +
					`productTypeId=${productTypeSelect.value}`,
			);

			if (!response.ok) {
				throw new Error(`HTTP error! status: ${response.status}`);
			}

			const data = await response.json();
			currentMetadata = data;
			renderMetadataGroups(data);
		} catch (error) {
			console.error("Error fetching metadata description:", error);
			if (metadataGroups) {
				metadataGroups.innerHTML = `
          <div class="p-4 text-sm text-red-700 bg-red-100 rounded-md">
            Error loading metadata description. Please try again.
          </div>
        `;
			}
		}
	}

	function renderMetadataGroups(groups: any[]) {
		if (!metadataGroups) return;

		if (groups.length === 0) {
			metadataGroups.innerHTML = `
        <div class="p-4 text-sm text-gray-700 bg-gray-100 rounded-md">
          No metadata available for the selected combination.
        </div>
      `;
			return;
		}

		metadataGroups.innerHTML = groups
			.map(
				(group) => `
      <div class="bg-gray-50 rounded-lg p-6">
        <h3 class="text-lg font-medium text-gray-900 mb-4">${group.name}</h3>
        <div class="space-y-4">
          ${group.metadata
				.map(
					(meta: any) => `
            <div>
              <label for="metadata_${meta.id}" class="block text-sm font-medium text-gray-700">
                ${meta.name}
                ${meta.tooltip ? `<span class="text-gray-500 text-xs ml-1" title="${meta.tooltip}">ⓘ</span>` : ""}
              </label>
              <input
                type="text"
                id="metadata_${meta.id}"
                name="metadata_${meta.id}"
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
                ${meta.format ? `pattern="${meta.format}"` : ""}
              >
            </div>
          `,
				)
				.join("")}
        </div>
      </div>
    `,
			)
			.join("");
	}

	// Listen for changes in the selects
	document
		.getElementById("common_name_id")
		?.addEventListener("change", fetchMetadataDescription);
	document
		.getElementById("category_id")
		?.addEventListener("change", fetchMetadataDescription);
	document
		.getElementById("product_type_id")
		?.addEventListener("change", fetchMetadataDescription);

	// Add metadata values to form submission
	form?.addEventListener("submit", (e) => {
		const metadataValues = currentMetadata
			.flatMap((group) =>
				group.metadata.map((meta: any) => ({
					id: meta.id,
					value: (
						document.getElementById(
							`metadata_${meta.id}`,
						) as HTMLInputElement
					)?.value,
				})),
			)
			.filter((mv) => mv.value);

		const metadataInput = document.createElement("input");
		metadataInput.type = "hidden";
		metadataInput.name = "metadata_values";
		metadataInput.value = JSON.stringify(metadataValues);
		form.appendChild(metadataInput);
	});
</script>
