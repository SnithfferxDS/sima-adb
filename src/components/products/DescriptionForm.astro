---
import MetadataDescription from "@Components/MetadataDescription.astro";
---

<h1 class="text-center text-2xl">
	Seleccione un Nombre Común
	<MetadataDescription productId="" />
</h1>

<script>
	async function fetchMetadataDescription(data: any[]) {
		try {
			renderMetadataGroups(data);
		} catch (error) {
			console.error("Error fetching metadata description:", error);
			if (productDescription) {
				productDescription.innerHTML =
					'<p class="text-sm text-red-500">Error loading metadata. Please try again.</p>';
			}
		}
	}

	function renderMetadataGroups(groups: any[]) {
		if (!productDescription) return;

		if (groups.length === 0) {
			productDescription.innerHTML =
				'<p class="text-sm text-gray-500">El nombre común no tiene metadatos.</p>';
			return;
		}
		/* 
        {
            id: 9,
            name: 'Tipo de Memoria',
            position: 1,
            active: true,
            allow_description: true,
            is_feature: false,
            format: null,
            tooltip: 'Según especificaciones técnicas, digite o seleccione el tipo de memoria RAM',
            id_group: null,
            created_at: 2024-12-14T17:53:51.000Z,
            updated_at: 2024-12-17T19:02:25.089Z
        } */
		productDescription.innerHTML = groups
			.map(
				(group) => `
                    <div class="rounded-lg p-6">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">${group.name}</h3>
                        <div class="space-y-4">
                        ${group.metadata
							.map(
								(meta: any) => `
                                    <div>
                                        <label for="metadata_${meta.id}" class="block text-sm font-medium text-gray-700">
                                            ${meta.name}
                                            ${meta.tooltip ? `<span class="text-gray-500 text-xs ml-1" title="${meta.tooltip}">ⓘ</span>` : ""}
                                        </label>
                                        <!--div class="mt-1 flex rounded-md shadow-sm">
                                            <input
                                                type="text"
                                                id="metadata_${meta.id}"
                                                name="metadata_${meta.id}"
                                                class="flex-1 rounded-l-md border-gray-300 focus:border-primary-500 focus:ring-primary-500"
                                                ${meta.format ? `pattern="${meta.format}"` : ""}
                                            />
                                            <button
                                                type="button"
                                                data-metadata-id="${meta.id}"
                                                class="save-metadata-btn inline-flex items-center px-4 py-2 border border-l-0 border-gray-300 rounded-r-md bg-gray-50 text-sm font-medium text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-1 focus:ring-primary-500"
                                            >
                                                Save
                                            </button>
                                        </!--div-->
                                        <div class="relative">
                                            <input
                                                type="text"
                                                id="metadata_${meta.id}"
                                                class="block w-full p-2.5 ps-10 text-sm border rounded-lg shadow-sm text-gray-900 bg-gray-100 border-gray-400 focus:ring-blue-500 focus:border-blue-500 dark:text-gray-200 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-blue-600 dark:focus:border-blue-600"
                                            />
                                            <div class="absolute inset-y-0 end-0 flex items-center ps-3.5">
                                                <button
                                                    class="mr-2 bg-transparent text-green-600 hover:text-green-500 dark:hover:text-green-300 dark:text-green-400 font-medium"
                                                    type="button"
                                                    id="saveinput_${meta.id}"
                                                    title="Guardar"
                                                    data-toggle="tooltip"
                                                    onclick="saveMetadataValue(${meta.id})"
                                                >
                                                    <span class="material-symbols-outlined"> save </span>
                                                </button>
                                                <button
                                                    class="mr-2 bg-transparent text-secondary-600 hover:text-secondary-700 dark:text-secondary-700 dark:hover:text-secondary-800 font-medium"
                                                    type="button"
                                                    id="redoinput_${meta.id}"
                                                    title="Re-hacer"
                                                    data-toggle="tooltip"
                                                    onclick="redoMetadataValue(${meta.id})"
                                                >
                                                    <span class="material-symbols-outlined">
                                                        undo
                                                    </span>
                                                </button>
                                                <button
                                                    class="test-gray-500"
                                                    type="button"
                                                    id="cleaninput_${meta.id}"
                                                    title="Limpiar"
                                                    data-toggle="tooltip"
                                                    onclick="cleanMetadataValue(${meta.id})"
                                                >
                                                    <span class="material-symbols-outlined"> cleaning_services </span>
                                                </button>
                                            </div>
                                        </div>
                                    </div>`,
							)
							.join("")}
                        </div>
                    </div>`,
			)
			.join("");
	}

	async function saveMetadataValue(metadataId: number) {
		const productId = (document.getElementById("id") as HTMLInputElement)
			.value;
		const value = (
			document.getElementById(
				`metadata_${metadataId}`,
			) as HTMLInputElement
		).value;

		if (!productId) {
			alert("Please save the product first");
			return;
		}

		try {
			const response = await fetch("/api/metadata/metadata-values", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					product_id: productId,
					metadata_id: metadataId,
					value,
				}),
			});

			if (!response.ok) {
				throw new Error("Failed to save metadata value");
			}

			alert("Metadata value saved successfully");
		} catch (error) {
			console.error("Error saving metadata value:", error);
			alert("Failed to save metadata value");
		}
	}

	async function cleanMetadataValue(metadataId: number) {
		const productId = (document.getElementById("id") as HTMLInputElement)
			.value;
		const value = (
			document.getElementById(
				`metadata_${metadataId}`,
			) as HTMLInputElement
		).value;

		if (!productId) {
			alert("Please save the product first");
			return;
		}

		try {
			const response = await fetch("/api/metadata/metadata-values", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					product_id: productId,
					metadata_id: metadataId,
					value,
				}),
			});

			if (!response.ok) {
				throw new Error("Failed to save metadata value");
			}

			alert("Metadata value saved successfully");
		} catch (error) {
			console.error("Error saving metadata value:", error);
			alert("Failed to save metadata value");
		}
	}
</script>
