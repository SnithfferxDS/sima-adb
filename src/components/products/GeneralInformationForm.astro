---
import { db, and, eq } from "astro:db";
import { Brand, Category, CommonName, ProductType } from "astro:db";
const Categories = await db
	.select({ id: Category.id, name: Category.name })
	.from(Category)
	.where(and(eq(Category.active, true), eq(Category.parents, "[]")))
	.all();
const Brands = await db
	.select({ id: Brand.id, name: Brand.name })
	.from(Brand)
	.all();
const CommonNames = await db
	.select({
		id: CommonName.id,
		name: CommonName.name,
		categories: CommonName.categories,
		active: CommonName.active,
		desc_active: CommonName.desc_active,
	})
	.from(CommonName)
	.all();
const ProductTypes = await db
	.select({
		id: ProductType.id,
		name: ProductType.name,
		categories: ProductType.categories,
	})
	.from(ProductType)
	.all();
---

<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
	<!-- Image -->
	<div class="col-span-1">
		<div class="rounded-lg shadow">
			<!-- <UploadFile productId="productImage"/> -->
		</div>
	</div>
	<!-- General -->
	<div class="col-span-1 lg:col-span-2 flex items-center">
		<div
			class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-0 sm:gap-4"
		>
			<div class="col-span-1 sm:col-span-1 md:col-span-1">
				<label
					for="productCategories"
					class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
					>Categorías</label
				>
				<select
					id="productCategories"
					name="productCategories"
					class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 select2"
				>
					<option value="0" selected=""
						>-- Seleccionar Categoría --</option
					>
					{
						Categories.map((category) => (
							<option value={category.id}>{category.name}</option>
						))
					}
				</select>
			</div>
			<div class="col-span-1 sm:col-span-1 md:col-span-2">
				<label
					for="productCommonName"
					class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
					>Nombre Común</label
				>
				<select
					id="productCommonName"
					name="productCommonName"
					class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 select2"
				>
					<option value="0" selected=""
						>-- Seleccionar Nombre Común --</option
					>
					{
						CommonNames.map((commonName) => (
							<option
								value={commonName.id}
								data-categories={commonName.categories}
								data-active={commonName.active}
								data-description={commonName.desc_active}
							>
								{commonName.name}
							</option>
						))
					}
				</select>
			</div>
			<div class="col-span-1 sm:col-span-1 md:col-span-1">
				<label
					for="productType"
					class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
					>Tipo</label
				>
				<select
					id="productType"
					name="productType"
					class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 select2"
				>
					<option value="0" selected="">-- Seleccionar Tipo --</option
					>

					{
						ProductTypes.map((type) => (
							<option
								value={type.id}
								data-categories={type.categories}
							>
								{type.name}
							</option>
						))
					}
				</select>
			</div>
			<div class="col-span-1 sm:col-span-1 md:col-span-1">
				<label
					for="productBrand"
					class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
					>Marca</label
				>
				<select
					id="productBrand"
					name="productBrand"
					class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 select2"
				>
					<option value="0" selected=""
						>-- Seleccionar Marca --</option
					>
					{
						Brands.map((brand) => (
							<option value={brand.id}>{brand.name}</option>
						))
					}
				</select>
			</div>
			<div class="col-span-1 sm:col-span-1 md:col-span-1">
				<label
					for="productSKU"
					class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
					>SKU</label
				>
				<div class="relative">
					<div class="absolute inset-y-0 end-0 flex items-center">
						<button
							data-tooltip-target="tooltip-gen-sku"
							type="button"
							class="text-white
                                end-2.5
                                bottom-2.5
                                bg-primary-700
                                hover:bg-primary-800
                                focus:ring-4
                                focus:outline-none
                                focus:ring-primary-300
                                font-medium
                                rounded-lg
                                text-sm px-3 py-2.5
                                text-center
                                dark:bg-primary-600
                                dark:hover:bg-primary-700
                                dark:focus:ring-primary-800"
							id="productSKUGenButton"
						>
							<svg
								xmlns="http://www.w3.org/2000/svg"
								height="24px"
								viewBox="0 -960 960 960"
								width="24px"
								fill="#e8eaed"
								><path
									d="M160-160q-33 0-56.5-23.5T80-240v-480q0-33 23.5-56.5T160-800h640q33 0 56.5 23.5T880-720v480q0 33-23.5 56.5T800-160H160Zm0-80h640v-400H160v400Zm140-40-56-56 103-104-104-104 57-56 160 160-160 160Zm180 0v-80h240v80H480Z"
								>
								</path></svg
							>
							<span class="sr-only">Generar SKU</span>
						</button>
						<div
							id="tooltip-gen-sku"
							role="tooltip"
							class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-gray-700"
						>
							Generar SKU
							<div class="tooltip-arrow" data-popper-arrow></div>
						</div>
					</div>
					<input
						type="text"
						name="productSKU"
						id="productSKU"
						class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
						placeholder="SKU del Producto"
					/>
				</div>
			</div>
			<div class="col-span-1 sm:col-span-1 md:col-span-1">
				<label
					for="productMPN"
					class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
					>MPN</label
				>
				<div class="relative">
					<div class="absolute inset-y-0 end-0 flex items-center">
						<button
							data-tooltip-target="tooltip-gen-mpn"
							type="button"
							class="text-white
                                end-2.5
                                bottom-2.5
                                focus:ring-4
                                focus:outline-none
                                font-medium
                                rounded-lg
                                text-sm px-3 py-2.5
                                text-center
                                bg-primary-600
                                hover:bg-primary-700
                                focus:ring-primary-700
                                dark:bg-primary-600
                                dark:hover:bg-primary-700
                                dark:focus:ring-primary-700"
							id="productMPNGenButton"
						>
							<svg
								xmlns="http://www.w3.org/2000/svg"
								height="24px"
								viewBox="0 -960 960 960"
								width="24px"
								fill="#e8eaed"
								><path
									d="M160-160q-33 0-56.5-23.5T80-240v-480q0-33 23.5-56.5T160-800h640q33 0 56.5 23.5T880-720v480q0 33-23.5 56.5T800-160H160Zm0-80h640v-400H160v400Zm140-40-56-56 103-104-104-104 57-56 160 160-160 160Zm180 0v-80h240v80H480Z"
								>
								</path></svg
							>
							<span class="sr-only">Generar MPN</span>
						</button>
						<div
							id="tooltip-gen-mpn"
							role="tooltip"
							class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-gray-700"
						>
							Generar MPN
							<div class="tooltip-arrow" data-popper-arrow></div>
						</div>
					</div>
					<input
						type="text"
						name="productMPN"
						id="productMPN"
						class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
						placeholder="MPN del Producto"
					/>
				</div>
			</div>
			<div class="col-span-1 sm:col-span-1 md:col-span-1">
				<label
					for="productUPC"
					class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
					>UPC</label
				>
				<div class="relative">
					<div class="absolute inset-y-0 end-0 flex items-center">
						<button
							data-tooltip-target="tooltip-gen-upc"
							type="button"
							class="text-white
                                end-2.5
                                bottom-2.5
                                bg-primary-700
                                hover:bg-primary-800
                                focus:ring-4
                                focus:outline-none
                                focus:ring-primary-300
                                font-medium
                                rounded-lg
                                text-sm px-3 py-2.5
                                text-center
                                dark:bg-primary-600
                                dark:hover:bg-primary-700
                                dark:focus:ring-primary-800"
							id="productUPCGenButton"
						>
							<svg
								xmlns="http://www.w3.org/2000/svg"
								height="24px"
								viewBox="0 -960 960 960"
								width="24px"
								fill="#e8eaed"
								><path
									d="M160-160q-33 0-56.5-23.5T80-240v-480q0-33 23.5-56.5T160-800h640q33 0 56.5 23.5T880-720v480q0 33-23.5 56.5T800-160H160Zm0-80h640v-400H160v400Zm140-40-56-56 103-104-104-104 57-56 160 160-160 160Zm180 0v-80h240v80H480Z"
								>
								</path></svg
							>
							<span class="sr-only">Generar UPC</span>
						</button>
						<div
							id="tooltip-gen-upc"
							role="tooltip"
							class="absolute z-10 invisible inline-block px-3 py-2 text-sm font-medium text-white transition-opacity duration-300 bg-gray-900 rounded-lg shadow-sm opacity-0 tooltip dark:bg-gray-700"
						>
							Generar UPC
							<div class="tooltip-arrow" data-popper-arrow></div>
						</div>
					</div>
					<input
						type="text"
						name="productUPC"
						id="productUPC"
						class="shadow-sm
                            bg-gray-50
                            border
                            text-sm
                            rounded-lg
                            block
                            w-full
                            p-2.5 ps-10
                            border-gray-300
                            text-gray-900
                            focus:ring-primary-600
                            focus:border-primary-600
                            dark:bg-gray-600
                            dark:border-gray-500
                            dark:placeholder-gray-400
                            dark:text-white
                            dark:focus:ring-primary-500
                            dark:focus:border-primary-500"
						placeholder="UPC de Producto"
						required=""
					/>
				</div>
				<p
					id="productUPC-valid"
					class="mt-2 text-sm text-green-600 dark:text-green-500 hidden"
				>
					<span class="font-medium">¡Bien!</span> ¡El UPC no existe!
				</p>

				<p
					id="productUPC-invalid"
					class="mt-2 text-sm text-red-600 dark:text-red-500 hidden"
				>
					<span class="font-medium">Oops!</span> ¡El UPC ya existe!
				</p>
			</div>
			<div class="col-span-1 sm:col-span-1 md:col-span-1">
				<label
					for="productEAN"
					class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
					>EAN</label
				>
				<input
					type="text"
					name="productEAN"
					id="productEAN"
					class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
					placeholder="EAN del Producto"
				/>
			</div>
			<div class="col-span-1 flex items-center">
				<label class="inline-flex items-center mb-2 cursor-pointer">
					<input
						id="productUsed"
						name="productUsed"
						type="checkbox"
						value=""
						class="sr-only peer"
					/>
					<div
						class="relative w-11 h-6 bg-red-500 peer peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-gray-300 peer-checked:after:translate-x-full peer-checked:after:border-white peer-checked:bg-green-600 rounded-full rtl:peer-checked:after:-translate-x-full after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:w-5 after:h-5 after:transition-all dark:peer-focus:ring-gray-800 dark:bg-red-700 dark:border-gray-600"
					>
					</div>
					<span
						class="ms-3 text-sm font-medium text-gray-400 dark:text-gray-500"
					>
						Usado/Reparado
					</span>
				</label>
			</div>
			<div class="col-span-1 sm:col-span-1 md:col-span-2">
				<label
					for="productName"
					class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
					>Nombre</label
				>
				<input
					type="text"
					name="productName"
					id="productName"
					class="shadow-sm bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
					placeholder="Nombre del Producto"
					required=""
				/>
			</div>
			<div class="col-span-1 flex items-center">
				<label class="inline-flex items-center mb-2 cursor-pointer">
					<input
						id="productActive"
						name="productActive"
						type="checkbox"
						value=""
						class="sr-only peer"
					/>
					<div
						class="relative w-11 h-6 bg-red-500 peer peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-gray-300 peer-checked:after:translate-x-full peer-checked:after:border-white peer-checked:bg-green-600 rounded-full rtl:peer-checked:after:-translate-x-full after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:w-5 after:h-5 after:transition-all dark:peer-focus:ring-gray-800 dark:bg-red-700 dark:border-gray-600"
					>
					</div>
					<span
						class="ms-3 text-sm font-medium text-gray-400 dark:text-gray-500"
					>
						Activo
					</span>
				</label>
			</div>
		</div>
	</div>
	<div class="col-span-1 flex items-center">
		<button
			id="btnAddProduct"
			class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-md"
			type="button">Guardar</button
		>
	</div>
</div>

<script>
	import { generateName } from "@Utils/functions";
	import { showSuccess, showError } from "@Utils/notifications";

	const commonNameSelect = document.getElementById(
		"productCommonName",
	) as HTMLSelectElement;
	const typeSelect = document.getElementById(
		"productType",
	) as HTMLSelectElement;
	const brandSelect = document.getElementById(
		"productBrand",
	) as HTMLSelectElement;
	const mpnInput = document.getElementById("productMPN") as HTMLInputElement;
	const skuInput = document.getElementById("productSKU") as HTMLInputElement;
	const nameInput = document.getElementById(
		"productName",
	) as HTMLInputElement;
	const upcInput = document.getElementById("productUPC") as HTMLInputElement;
	const eanInput = document.getElementById("productEAN") as HTMLInputElement;
	const productIdInput = document.getElementById(
		"productId",
	) as HTMLInputElement;
	const productDescription = document.getElementById(
		"productDesc",
	) as HTMLElement;
	const categorySelect = document.getElementById(
		"productCategories",
	) as HTMLSelectElement;

	// Function to update product name
	const updateProductName = () => {
		generateName(
			commonNameSelect,
			typeSelect,
			brandSelect,
			mpnInput,
			skuInput,
			nameInput,
		);
	};

	// Get Description form usign the common name

	const getDescriptionByCommonName = async () => {
		updateProductName();
		const productId = productIdInput.value;
		const commonNameId = commonNameSelect.value;
		const description =
			commonNameSelect.options[Number(commonNameId)].dataset.description;
		const categories =
			commonNameSelect.options[Number(commonNameId)].dataset.categories;
		/* if (description) {
			try {
				const response = await fetch("/api/metadata/description", {
					method: "POST",
					headers: {
						"Content-Type": "application/json",
					},
					body: JSON.stringify({
						product: productId,
						common_name: commonNameId,
						categories: categories,
					}),
				});
				if (response.ok) {
					const data = await response.json();
					fetchMetadataDescription(data);
				}
			} catch (error) {
				console.error("Error:", error);
			}
		} */

		async function fetchData(url: string) {
			try {
				const response = await fetch(url);
				if (!response.ok) {
					throw new Error(`HTTP error! status: ${response.status}`);
				}
				const data = await response.json();
				return data;
			} catch (error) {
				console.error("Error fetching data:", error);
				return [];
			}
		}
	};

	const getDescriptionByType = async () => {
		updateProductName();
		/* 
		const description = commonNameSelect.dataset.description;
        if (description) {
			try {
				const response = await fetch("/api/metadata/description", {
					method: "POST",
					headers: {
						"Content-Type": "application/json",
					},
					body: JSON.stringify({
						product: productIdInput.value,
						common_names: commonNameSelect.value,
						categories: typeSelect.value,
						product_type: typeSelect.value,
					}),
				});
				if (response.ok) {
					const data = await response.json();
					fetchMetadataDescription(data);
				}
			} catch (error) {
				console.error("Error:", error);
			}
		} */
	};

	// Add event listeners
	commonNameSelect.addEventListener("change", getDescriptionByCommonName);
	typeSelect.addEventListener("change", getDescriptionByType);
	brandSelect.addEventListener("change", updateProductName);
	mpnInput.addEventListener("keyup", updateProductName);
	skuInput.addEventListener("keyup", updateProductName);
	upcInput.addEventListener("keyup", updateProductName);

	const generalInfo = document.getElementById("btnAddProduct");

	// Initialize MPN and SKU generation buttons
	const mpnGenButton = document.getElementById("productMPNGenButton");
	const skuGenButton = document.getElementById("productSKUGenButton");
	const upcGenButton = document.getElementById("productUPCGenButton");

	mpnGenButton?.addEventListener("click", async (e) => {
		e.preventDefault();
		try {
			const response = await fetch("/api/products/mpn/exists").then(
				(res) => res.text(),
			);
			if (response) {
				mpnInput.value = response;
			}
		} catch (error) {
			console.error("Error:", error);
		}
		updateProductName();
	});

	skuGenButton?.addEventListener("click", async (e) => {
		e.preventDefault();
		try {
			const response = await fetch("/api/products/sku/exists").then(
				(res) => res.text(),
			);
			if (response) {
				skuInput.value = response;
			}
		} catch (error) {
			console.error("Error:", error);
		}
		updateProductName();
	});

	upcGenButton?.addEventListener("click", async (e) => {
		e.preventDefault();
		try {
			const response = await fetch("/api/products/upc/exists").then(
				(res) => res.text(),
			);
			if (response) {
				upcInput.value = response;
				eanInput.value = response;
			}
		} catch (error) {
			console.error("Error: ", error);
		}
		updateProductName();
	});

	const form = document.getElementById("createForm");
	generalInfo?.addEventListener("click", async (e) => {
		e.preventDefault();
		const formData = new FormData(form as HTMLFormElement);
		const logoFile = (
			document.getElementById("productImage") as HTMLInputElement
		).files?.[0];
		try {
			let logoUrl = null;
			if (logoFile) {
				logoUrl = ""; //await uploadFile(logoFile);
			}

			const data = {
				name: formData.get("productName"),
				common: formData.get("productCommonName"),
				logo: logoUrl,
				active: formData.get("productActive") === "on",
				refurbished: formData.get("productUsed") === "on",
				type: formData.get("productType"),
				brand: formData.get("productBrand"),
				mpn: formData.get("productMPN"),
				sku: formData.get("productSKU"),
				upc: formData.get("productUPC"),
				ean: formData.get("productEAN"),
				info: "general",
			};

			const response = await fetch("/api/products", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify(data),
			});

			if (response.ok) {
				showSuccess("Producto creado exitosamente");
				window.location.href = "/products";
			} else {
				const error = await response.json();
				showError(error.message || "Error al crear producto");
			}
		} catch (error) {
			console.error("Error:", error);
			showError("Error al crear producto");
		}
	});

	categorySelect?.addEventListener("change", async () => {
		const categoryId = categorySelect.value;
		console.log(categoryId);
		const commonNames = await fetch("/api/data/resources", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({
				resource: "common_names",
				params: {
					category_id: categoryId,
				},
			}),
		}).then((res) => res.json());
		console.log(commonNames);
		/* 
        commonNameSelect.innerHTML =
            '<option value="">Selecione un nombre común</option>';
        if (commonNames) {
            commonNames.forEach((commonName: any) => {
                const option = document.createElement("option");
                option.value = commonName.id;
                option.textContent = commonName.name;
                commonNameSelect.appendChild(option);
            });
        } */
	});
</script>
