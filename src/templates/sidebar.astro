---
import { isCurrentPath } from "@Utils/navigation";
// import { SidebarMenu } from 'astro:db';
import SidebarMenuItem from "@Components/shared/SidebarMenuItem.astro";
interface MenuItem {
	id: number;
	name: string;
	url?: string;
	icon?: string;
	parent_id?: number;
	position: number;
	children: MenuItem[];
}

interface Props {
	items: MenuItem[];
}

const currentPath = Astro.url.pathname;
const { items } = Astro.props;

/* sidebarMenu.map((item) => {
	if (item.submenu && typeof item.submenu === "string") {
		item.submenu = JSON.parse(item.submenu);
	} else {
		item.submenu = item.submenu;
	}
});

interface SubmenuItem {
	url: string;
	title: string;
}

interface Submenu {
	submenu: SubmenuItem[];
	id: number;
	name: string;
	icon: string;
	url: string;
	created_at: Date;
	updated_at: Date | null;
} */

// Organize items into a hierarchy
function buildMenuHierarchy(menuItems: MenuItem[]) {
	const itemMap = new Map<number, MenuItem & { children: MenuItem[] }>();
	const rootItems: (MenuItem & { children: MenuItem[] })[] = [];

	// First pass: Create enhanced items with children arrays
	menuItems.forEach((item) => {
		itemMap.set(item.id, { ...item, children: [] });
	});

	// Second pass: Organize into hierarchy
	menuItems.forEach((item) => {
		const enhancedItem = itemMap.get(item.id)!;
		if (item.parent_id && itemMap.has(item.parent_id)) {
			itemMap.get(item.parent_id)!.children.push(enhancedItem);
		} else {
			rootItems.push(enhancedItem);
		}
	});

	// Sort items by position
	const sortByPosition = (a: MenuItem, b: MenuItem) =>
		a.position - b.position;
	rootItems.sort(sortByPosition);
	rootItems.forEach((item) => item.children.sort(sortByPosition));

	return rootItems;
}
const menuHerarchy = buildMenuHierarchy(items);
---

<aside
	id="sidebar"
	class="fixed
    top-0
    left-0
    z-30
    flex-col
    flex-shrink-0
    hidden
    w-64
    h-full
    font-normal
    duration-75
    lg:flex
    drop-shadow-md lg:drop-shadow-none
    transition-width
    shadow-md
    pt-12"
	aria-label="Sidebar"
>
	<div
		class="relative
        flex
        flex-col
        flex-1
        min-h-0
        pt-6
        border-r
		shadow-md
		shadow-primary-500/75
		text-white
        bg-gradient-to-b from-primary-600 to-primary-300
        dark:from-primary-600 dark:to-primary-200
        border-primary-500/50 dark:border-primary-700/50"
	>
		<div
			class:list={[
				"flex flex-col flex-1 pt-5 pb-28 overflow-y-auto",
				"scrollbar scrollbar-w-2 scrollbar-thumb-rounded-[0.1667rem]",
				"scrollbar-thumb-purple-300 scrollbar-track-secondary-800",
				"dark:scrollbar-thumb-purple-900 dark:scrollbar-track-secondary-500",
			]}
		>
			<div class="flex-1 px-3 space-y-1 divide-y">
				<ul class="pb-2 space-y-2">
					<li>
						<form action="/search" method="GET" class="lg:hidden">
							<label for="mobile-search" class="sr-only"
								>Search</label
							>
							<div class="relative">
								<div
									class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none"
								>
									<svg
										class="w-5 h-5 text-primary-900 dark:text-gray-100"
										fill="currentColor"
										viewBox="0 0 20 20"
										xmlns="http://www.w3.org/2000/svg"
									>
										<path
											fill-rule="evenodd"
											d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
											clip-rule="evenodd"></path>
									</svg>
								</div>
								<input
									type="text"
									name="mobile-search"
									id="mobile-search"
									class="border
                                    text-sm
                                    rounded-lg
                                    block
                                    w-full
                                    pl-10
                                    p-2.5
                                    bg-secondary-400
                                    border-secondary-500
                                    text-gray-100
                                    focus:ring-secondary-600
                                    focus:border-secondary-600
                                    dark:bg-secondary-300
                                    dark:border-secondary-500
                                    dark:placeholder-gray-200"
									placeholder="Buscar.."
								/>
							</div>
						</form>
					</li>
					<!-- Home -->
					<li>
						<a
							href="/"
							class="flex
                            items-center
                            p-2 text-base
                            rounded-lg
                            group transition duration-75 focus:outline-offset-2
                            text-gray-100
                            hover:bg-secondary-500
                            focus:outline-secondary-600
                            dark:hover:bg-secondary-400"
						>
							<svg
								fill="currentColor"
								class="w-6 h-6"
								viewBox="0 0 24 24"
								xmlns="http://www.w3.org/2000/svg"
								aria-hidden="true"
							>
								<path
									d="M11.47 3.84a.75.75 0 011.06 0l8.69 8.69a.75.75 0 101.06-1.06l-8.689-8.69a2.25 2.25 0 00-3.182 0l-8.69 8.69a.75.75 0 001.061 1.06l8.69-8.69z"
								></path>
								<path
									d="M12 5.432l8.159 8.159c.03.03.06.058.091.086v6.198c0 1.035-.84 1.875-1.875 1.875H15a.75.75 0 01-.75-.75v-4.5a.75.75 0 00-.75-.75h-3a.75.75 0 00-.75.75V21a.75.75 0 01-.75.75H5.625a1.875 1.875 0 01-1.875-1.875v-6.198a2.29 2.29 0 00.091-.086L12 5.43z"
								></path>
							</svg>
							<span class="ml-3" sidebar-toggle-item>Home</span>
						</a>
					</li>
					<!-- Dashboard -->
					<li>
						<a
							href="/dashboard"
							class={`flex items-center p-2 text-base rounded-lg group transition duration-75 focus:outline-offset-2
                            text-gray-100
                            ${isCurrentPath("/dashboard", currentPath) ? "bg-secondary-500" : ""}
                            hover:bg-secondary-500
                            focus:outline-secondary-600
                            dark:hover:bg-secondary-400`}
						>
							<svg
								class="w-6 h-6"
								fill="currentColor"
								viewBox="0 0 20 20"
								xmlns="http://www.w3.org/2000/svg"
							>
								<path d="M2 10a8 8 0 018-8v8h8a8 8 0 11-16 0z"
								></path>
								<path
									d="M12 2.252A8.014 8.014 0 0117.748 8H12V2.252z"
								></path>
							</svg>
							<span class="ml-3" sidebar-toggle-item
								>Dashboard</span
							>
						</a>
					</li>
					{
						menuHerarchy.map((item) =>
							item.children.length > 0 ? (
								<SidebarMenuItem
									menuItem={item}
									currentPath={currentPath}
								/>
							) : (
								<li>
									<a
										id={item.id.toString()}
										href={item.url}
										class={`
											flex
											items-center
											p-2
											text-base
											font-normal
											rounded-lg
											text-gray-100
											${isCurrentPath(item.url || "", currentPath) ? "bg-secondary-500" : ""}
											hover:bg-secondary-500
											focus:outline-secondary-600
											dark:hover:bg-secondary-400`}
									>
										<span class="material-symbols-outlined">
											{item.icon}
										</span>
										<span class="ml-3">{item.name}</span>
									</a>
								</li>
							),
						)
					}
				</ul>
			</div>
		</div>
	</div>
</aside>

<div
	class="fixed inset-0 z-10 hidden bg-gray-900/50 dark:bg-gray-900/50"
	id="sidebarBackdrop"
>
</div>

<script>
	const sidebar = document.getElementById("sidebar");

	if (sidebar) {
		const toggleSidebarMobile = (
			sidebar: HTMLElement,
			sidebarBackdrop: HTMLElement,
			toggleSidebarMobileHamburger: HTMLElement,
			toggleSidebarMobileClose: HTMLElement,
		) => {
			sidebar.classList.toggle("hidden");
			sidebarBackdrop.classList.toggle("hidden");
			toggleSidebarMobileHamburger.classList.toggle("hidden");
			toggleSidebarMobileClose.classList.toggle("hidden");
		};

		const toggleSidebarMobileEl = document.getElementById(
			"toggleSidebarMobile",
		);
		const sidebarBackdrop = document.getElementById("sidebarBackdrop")!;
		const toggleSidebarMobileHamburger = document.getElementById(
			"toggleSidebarMobileHamburger",
		)!;
		const toggleSidebarMobileClose = document.getElementById(
			"toggleSidebarMobileClose",
		)!;
		const toggleSidebarMobileSearch = document.getElementById(
			"toggleSidebarMobileSearch",
		)!;

		toggleSidebarMobileSearch?.addEventListener("click", () => {
			toggleSidebarMobile(
				sidebar,
				sidebarBackdrop,
				toggleSidebarMobileHamburger,
				toggleSidebarMobileClose,
			);
		});

		toggleSidebarMobileEl?.addEventListener("click", () => {
			toggleSidebarMobile(
				sidebar,
				sidebarBackdrop,
				toggleSidebarMobileHamburger,
				toggleSidebarMobileClose,
			);
		});

		sidebarBackdrop?.addEventListener("click", () => {
			toggleSidebarMobile(
				sidebar,
				sidebarBackdrop,
				toggleSidebarMobileHamburger,
				toggleSidebarMobileClose,
			);
		});
	}
	function initializeMenuItem(menuItem: HTMLElement) {
		const button = menuItem.querySelector("button");
		const submenu = menuItem.querySelector(".submenu");
		const isActive = menuItem.classList.contains("active");

		if (isActive) {
			submenu?.classList.remove("hidden");
		}

		button?.addEventListener("mouseenter", () => {
			submenu?.classList.remove("hidden");
		});

		menuItem.addEventListener("mouseleave", () => {
			if (!isActive) {
				submenu?.classList.add("hidden");
			}
		});
	}

	// Initialize all menu items
	document.querySelectorAll(".menu-item").forEach((menuItem) => {
		initializeMenuItem(menuItem as HTMLElement);
	});
</script>
